
Servo_Motor.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000e6e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000dfa  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000003f  00800100  00800100  00000e6e  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000e6e  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000ea0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000050  00000000  00000000  00000edc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000a3b  00000000  00000000  00000f2c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000008b7  00000000  00000000  00001967  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000771  00000000  00000000  0000221e  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000d4  00000000  00000000  00002990  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000489  00000000  00000000  00002a64  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000012d  00000000  00000000  00002eed  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000040  00000000  00000000  0000301a  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	53 c0       	rjmp	.+166    	; 0xac <__bad_interrupt>
   6:	00 00       	nop
   8:	51 c0       	rjmp	.+162    	; 0xac <__bad_interrupt>
   a:	00 00       	nop
   c:	4f c0       	rjmp	.+158    	; 0xac <__bad_interrupt>
   e:	00 00       	nop
  10:	4d c0       	rjmp	.+154    	; 0xac <__bad_interrupt>
  12:	00 00       	nop
  14:	4b c0       	rjmp	.+150    	; 0xac <__bad_interrupt>
  16:	00 00       	nop
  18:	49 c0       	rjmp	.+146    	; 0xac <__bad_interrupt>
  1a:	00 00       	nop
  1c:	47 c0       	rjmp	.+142    	; 0xac <__bad_interrupt>
  1e:	00 00       	nop
  20:	45 c0       	rjmp	.+138    	; 0xac <__bad_interrupt>
  22:	00 00       	nop
  24:	43 c0       	rjmp	.+134    	; 0xac <__bad_interrupt>
  26:	00 00       	nop
  28:	5c c0       	rjmp	.+184    	; 0xe2 <__vector_10>
  2a:	00 00       	nop
  2c:	3f c0       	rjmp	.+126    	; 0xac <__bad_interrupt>
  2e:	00 00       	nop
  30:	3d c0       	rjmp	.+122    	; 0xac <__bad_interrupt>
  32:	00 00       	nop
  34:	3b c0       	rjmp	.+118    	; 0xac <__bad_interrupt>
  36:	00 00       	nop
  38:	39 c0       	rjmp	.+114    	; 0xac <__bad_interrupt>
  3a:	00 00       	nop
  3c:	37 c0       	rjmp	.+110    	; 0xac <__bad_interrupt>
  3e:	00 00       	nop
  40:	35 c0       	rjmp	.+106    	; 0xac <__bad_interrupt>
  42:	00 00       	nop
  44:	33 c0       	rjmp	.+102    	; 0xac <__bad_interrupt>
  46:	00 00       	nop
  48:	31 c0       	rjmp	.+98     	; 0xac <__bad_interrupt>
  4a:	00 00       	nop
  4c:	2f c0       	rjmp	.+94     	; 0xac <__bad_interrupt>
  4e:	00 00       	nop
  50:	2d c0       	rjmp	.+90     	; 0xac <__bad_interrupt>
  52:	00 00       	nop
  54:	2b c0       	rjmp	.+86     	; 0xac <__bad_interrupt>
  56:	00 00       	nop
  58:	29 c0       	rjmp	.+82     	; 0xac <__bad_interrupt>
  5a:	00 00       	nop
  5c:	27 c0       	rjmp	.+78     	; 0xac <__bad_interrupt>
  5e:	00 00       	nop
  60:	25 c0       	rjmp	.+74     	; 0xac <__bad_interrupt>
  62:	00 00       	nop
  64:	23 c0       	rjmp	.+70     	; 0xac <__bad_interrupt>
  66:	00 00       	nop
  68:	21 c0       	rjmp	.+66     	; 0xac <__bad_interrupt>
  6a:	00 00       	nop
  6c:	1f c0       	rjmp	.+62     	; 0xac <__bad_interrupt>
  6e:	00 00       	nop
  70:	1d c0       	rjmp	.+58     	; 0xac <__bad_interrupt>
  72:	00 00       	nop
  74:	1b c0       	rjmp	.+54     	; 0xac <__bad_interrupt>
  76:	00 00       	nop
  78:	19 c0       	rjmp	.+50     	; 0xac <__bad_interrupt>
  7a:	00 00       	nop
  7c:	17 c0       	rjmp	.+46     	; 0xac <__bad_interrupt>
  7e:	00 00       	nop
  80:	15 c0       	rjmp	.+42     	; 0xac <__bad_interrupt>
  82:	00 00       	nop
  84:	13 c0       	rjmp	.+38     	; 0xac <__bad_interrupt>
  86:	00 00       	nop
  88:	11 c0       	rjmp	.+34     	; 0xac <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_clear_bss>:
  98:	21 e0       	ldi	r18, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	01 c0       	rjmp	.+2      	; 0xa2 <.do_clear_bss_start>

000000a0 <.do_clear_bss_loop>:
  a0:	1d 92       	st	X+, r1

000000a2 <.do_clear_bss_start>:
  a2:	af 33       	cpi	r26, 0x3F	; 63
  a4:	b2 07       	cpc	r27, r18
  a6:	e1 f7       	brne	.-8      	; 0xa0 <.do_clear_bss_loop>
  a8:	1a d5       	rcall	.+2612   	; 0xade <main>
  aa:	a5 c6       	rjmp	.+3402   	; 0xdf6 <_exit>

000000ac <__bad_interrupt>:
  ac:	a9 cf       	rjmp	.-174    	; 0x0 <__vectors>

000000ae <UART1_Receive>:
	ADMUX = 0x41;                     // Channel Selection
	ADCSRA |= (1 << ADSC);               //ADC Start Conversion
	while(!(ADCSRA & (1 << ADIF)));         //ADC Interrupt Flag
	adc_num = ADC;
	return adc_num;
}
  ae:	eb e9       	ldi	r30, 0x9B	; 155
  b0:	f0 e0       	ldi	r31, 0x00	; 0
  b2:	80 81       	ld	r24, Z
  b4:	88 23       	and	r24, r24
  b6:	ec f7       	brge	.-6      	; 0xb2 <UART1_Receive+0x4>
  b8:	e0 91 08 01 	lds	r30, 0x0108	; 0x800108 <count>
  bc:	f0 91 09 01 	lds	r31, 0x0109	; 0x800109 <count+0x1>
  c0:	80 91 9c 00 	lds	r24, 0x009C	; 0x80009c <__TEXT_REGION_LENGTH__+0x7e009c>
  c4:	e4 5f       	subi	r30, 0xF4	; 244
  c6:	fe 4f       	sbci	r31, 0xFE	; 254
  c8:	80 83       	st	Z, r24
  ca:	e0 91 08 01 	lds	r30, 0x0108	; 0x800108 <count>
  ce:	f0 91 09 01 	lds	r31, 0x0109	; 0x800109 <count+0x1>
  d2:	e4 5f       	subi	r30, 0xF4	; 244
  d4:	fe 4f       	sbci	r31, 0xFE	; 254
  d6:	80 81       	ld	r24, Z
  d8:	08 95       	ret

000000da <UART0_Transmit>:
  da:	5d 9b       	sbis	0x0b, 5	; 11
  dc:	fe cf       	rjmp	.-4      	; 0xda <UART0_Transmit>
  de:	8c b9       	out	0x0c, r24	; 12
  e0:	08 95       	ret

000000e2 <__vector_10>:


ISR(TIMER2_OVF_vect){
  e2:	1f 92       	push	r1
  e4:	0f 92       	push	r0
  e6:	0f b6       	in	r0, 0x3f	; 63
  e8:	0f 92       	push	r0
  ea:	11 24       	eor	r1, r1
  ec:	0b b6       	in	r0, 0x3b	; 59
  ee:	0f 92       	push	r0
  f0:	2f 93       	push	r18
  f2:	3f 93       	push	r19
  f4:	4f 93       	push	r20
  f6:	5f 93       	push	r21
  f8:	6f 93       	push	r22
  fa:	7f 93       	push	r23
  fc:	8f 93       	push	r24
  fe:	9f 93       	push	r25
 100:	af 93       	push	r26
 102:	bf 93       	push	r27
 104:	cf 93       	push	r28
 106:	df 93       	push	r29
 108:	ef 93       	push	r30
 10a:	ff 93       	push	r31
	
if(temper[count] =='a'){
 10c:	e0 91 08 01 	lds	r30, 0x0108	; 0x800108 <count>
 110:	f0 91 09 01 	lds	r31, 0x0109	; 0x800109 <count+0x1>
 114:	e4 5f       	subi	r30, 0xF4	; 244
 116:	fe 4f       	sbci	r31, 0xFE	; 254
 118:	80 81       	ld	r24, Z
 11a:	81 36       	cpi	r24, 0x61	; 97
 11c:	09 f0       	breq	.+2      	; 0x120 <__vector_10+0x3e>
 11e:	8b c0       	rjmp	.+278    	; 0x236 <__vector_10+0x154>
	cnt++;
 120:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <cnt>
 124:	90 91 0b 01 	lds	r25, 0x010B	; 0x80010b <cnt+0x1>
 128:	01 96       	adiw	r24, 0x01	; 1
 12a:	90 93 0b 01 	sts	0x010B, r25	; 0x80010b <cnt+0x1>
 12e:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <cnt>
	if(cnt==10){ // 0도 -> 45도로 팔 들기 (a)
 132:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <cnt>
 136:	90 91 0b 01 	lds	r25, 0x010B	; 0x80010b <cnt+0x1>
 13a:	0a 97       	sbiw	r24, 0x0a	; 10
 13c:	09 f0       	breq	.+2      	; 0x140 <__vector_10+0x5e>
 13e:	7b c0       	rjmp	.+246    	; 0x236 <__vector_10+0x154>

		OCR1A= 5000 * 0.075 + x1;
 140:	60 91 02 01 	lds	r22, 0x0102	; 0x800102 <x1>
 144:	70 91 03 01 	lds	r23, 0x0103	; 0x800103 <x1+0x1>
 148:	07 2e       	mov	r0, r23
 14a:	00 0c       	add	r0, r0
 14c:	88 0b       	sbc	r24, r24
 14e:	99 0b       	sbc	r25, r25
 150:	a2 d5       	rcall	.+2884   	; 0xc96 <__floatsisf>
 152:	20 e0       	ldi	r18, 0x00	; 0
 154:	30 e8       	ldi	r19, 0x80	; 128
 156:	4b eb       	ldi	r20, 0xBB	; 187
 158:	53 e4       	ldi	r21, 0x43	; 67
 15a:	07 d5       	rcall	.+2574   	; 0xb6a <__addsf3>
 15c:	6e d5       	rcall	.+2780   	; 0xc3a <__fixunssfsi>
 15e:	7b bd       	out	0x2b, r23	; 43
 160:	6a bd       	out	0x2a, r22	; 42
		OCR1B= 5000 * 0.075 -x2;
 162:	60 91 00 01 	lds	r22, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 166:	70 91 01 01 	lds	r23, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 16a:	07 2e       	mov	r0, r23
 16c:	00 0c       	add	r0, r0
 16e:	88 0b       	sbc	r24, r24
 170:	99 0b       	sbc	r25, r25
 172:	91 d5       	rcall	.+2850   	; 0xc96 <__floatsisf>
 174:	9b 01       	movw	r18, r22
 176:	ac 01       	movw	r20, r24
 178:	60 e0       	ldi	r22, 0x00	; 0
 17a:	70 e8       	ldi	r23, 0x80	; 128
 17c:	8b eb       	ldi	r24, 0xBB	; 187
 17e:	93 e4       	ldi	r25, 0x43	; 67
 180:	f3 d4       	rcall	.+2534   	; 0xb68 <__subsf3>
 182:	5b d5       	rcall	.+2742   	; 0xc3a <__fixunssfsi>
 184:	79 bd       	out	0x29, r23	; 41
 186:	68 bd       	out	0x28, r22	; 40

		if(OCR1A!=5000*0.1 && OCR1B!=5000*0.05)
 188:	6a b5       	in	r22, 0x2a	; 42
 18a:	7b b5       	in	r23, 0x2b	; 43
 18c:	80 e0       	ldi	r24, 0x00	; 0
 18e:	90 e0       	ldi	r25, 0x00	; 0
 190:	80 d5       	rcall	.+2816   	; 0xc92 <__floatunsisf>
 192:	20 e0       	ldi	r18, 0x00	; 0
 194:	30 e0       	ldi	r19, 0x00	; 0
 196:	4a ef       	ldi	r20, 0xFA	; 250
 198:	53 e4       	ldi	r21, 0x43	; 67
 19a:	4b d5       	rcall	.+2710   	; 0xc32 <__cmpsf2>
 19c:	88 23       	and	r24, r24
 19e:	a9 f0       	breq	.+42     	; 0x1ca <__vector_10+0xe8>
 1a0:	68 b5       	in	r22, 0x28	; 40
 1a2:	79 b5       	in	r23, 0x29	; 41
 1a4:	80 e0       	ldi	r24, 0x00	; 0
 1a6:	90 e0       	ldi	r25, 0x00	; 0
 1a8:	74 d5       	rcall	.+2792   	; 0xc92 <__floatunsisf>
 1aa:	20 e0       	ldi	r18, 0x00	; 0
 1ac:	30 e0       	ldi	r19, 0x00	; 0
 1ae:	4a e7       	ldi	r20, 0x7A	; 122
 1b0:	53 e4       	ldi	r21, 0x43	; 67
 1b2:	3f d5       	rcall	.+2686   	; 0xc32 <__cmpsf2>
 1b4:	88 23       	and	r24, r24
 1b6:	49 f0       	breq	.+18     	; 0x1ca <__vector_10+0xe8>
 1b8:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <x1>
		x1++;
 1bc:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <x1+0x1>
 1c0:	01 96       	adiw	r24, 0x01	; 1
 1c2:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <x1+0x1>
 1c6:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <x1>
 1ca:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
		x2++;
 1ce:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 1d2:	01 96       	adiw	r24, 0x01	; 1
 1d4:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 1d8:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
		
		cnt=0;
 1dc:	10 92 0b 01 	sts	0x010B, r1	; 0x80010b <cnt+0x1>
 1e0:	10 92 0a 01 	sts	0x010A, r1	; 0x80010a <cnt>
		if(OCR1A == 5000 * 0.1 && OCR1B ==5000 * 0.05){
 1e4:	6a b5       	in	r22, 0x2a	; 42
 1e6:	7b b5       	in	r23, 0x2b	; 43
 1e8:	80 e0       	ldi	r24, 0x00	; 0
 1ea:	90 e0       	ldi	r25, 0x00	; 0
 1ec:	52 d5       	rcall	.+2724   	; 0xc92 <__floatunsisf>
 1ee:	20 e0       	ldi	r18, 0x00	; 0
 1f0:	30 e0       	ldi	r19, 0x00	; 0
 1f2:	4a ef       	ldi	r20, 0xFA	; 250
 1f4:	53 e4       	ldi	r21, 0x43	; 67
 1f6:	1d d5       	rcall	.+2618   	; 0xc32 <__cmpsf2>
 1f8:	81 11       	cpse	r24, r1
 1fa:	1d c0       	rjmp	.+58     	; 0x236 <__vector_10+0x154>
 1fc:	68 b5       	in	r22, 0x28	; 40
 1fe:	79 b5       	in	r23, 0x29	; 41
 200:	80 e0       	ldi	r24, 0x00	; 0
 202:	90 e0       	ldi	r25, 0x00	; 0
 204:	46 d5       	rcall	.+2700   	; 0xc92 <__floatunsisf>
 206:	20 e0       	ldi	r18, 0x00	; 0
 208:	30 e0       	ldi	r19, 0x00	; 0
 20a:	4a e7       	ldi	r20, 0x7A	; 122
 20c:	53 e4       	ldi	r21, 0x43	; 67
 20e:	11 d5       	rcall	.+2594   	; 0xc32 <__cmpsf2>
 210:	81 11       	cpse	r24, r1
 212:	11 c0       	rjmp	.+34     	; 0x236 <__vector_10+0x154>
 214:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <count>
			count++;
 218:	90 91 09 01 	lds	r25, 0x0109	; 0x800109 <count+0x1>
 21c:	01 96       	adiw	r24, 0x01	; 1
 21e:	90 93 09 01 	sts	0x0109, r25	; 0x800109 <count+0x1>
 222:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <count>
 226:	10 92 03 01 	sts	0x0103, r1	; 0x800103 <x1+0x1>
			x1=0;
 22a:	10 92 02 01 	sts	0x0102, r1	; 0x800102 <x1>
 22e:	10 92 01 01 	sts	0x0101, r1	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
			x2=0;
 232:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <__DATA_REGION_ORIGIN__>
 236:	e0 91 08 01 	lds	r30, 0x0108	; 0x800108 <count>
		}
	}
}

if(temper[count] =='b'){
 23a:	f0 91 09 01 	lds	r31, 0x0109	; 0x800109 <count+0x1>
 23e:	e4 5f       	subi	r30, 0xF4	; 244
 240:	fe 4f       	sbci	r31, 0xFE	; 254
 242:	80 81       	ld	r24, Z
 244:	82 36       	cpi	r24, 0x62	; 98
 246:	09 f0       	breq	.+2      	; 0x24a <__vector_10+0x168>
 248:	8b c0       	rjmp	.+278    	; 0x360 <__vector_10+0x27e>
 24a:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <cnt>
	cnt++;
 24e:	90 91 0b 01 	lds	r25, 0x010B	; 0x80010b <cnt+0x1>
 252:	01 96       	adiw	r24, 0x01	; 1
 254:	90 93 0b 01 	sts	0x010B, r25	; 0x80010b <cnt+0x1>
 258:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <cnt>
 25c:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <cnt>
	if(cnt==10){ // 45도 -> 0도 팔 내리기 (b)
 260:	90 91 0b 01 	lds	r25, 0x010B	; 0x80010b <cnt+0x1>
 264:	0a 97       	sbiw	r24, 0x0a	; 10
 266:	09 f0       	breq	.+2      	; 0x26a <__vector_10+0x188>
 268:	7b c0       	rjmp	.+246    	; 0x360 <__vector_10+0x27e>
		OCR1A = 5000 * 0.1 - x1;
 26a:	60 91 02 01 	lds	r22, 0x0102	; 0x800102 <x1>
 26e:	70 91 03 01 	lds	r23, 0x0103	; 0x800103 <x1+0x1>
 272:	07 2e       	mov	r0, r23
 274:	00 0c       	add	r0, r0
 276:	88 0b       	sbc	r24, r24
 278:	99 0b       	sbc	r25, r25
 27a:	0d d5       	rcall	.+2586   	; 0xc96 <__floatsisf>
 27c:	9b 01       	movw	r18, r22
 27e:	ac 01       	movw	r20, r24
 280:	60 e0       	ldi	r22, 0x00	; 0
 282:	70 e0       	ldi	r23, 0x00	; 0
 284:	8a ef       	ldi	r24, 0xFA	; 250
 286:	93 e4       	ldi	r25, 0x43	; 67
 288:	6f d4       	rcall	.+2270   	; 0xb68 <__subsf3>
 28a:	d7 d4       	rcall	.+2478   	; 0xc3a <__fixunssfsi>
 28c:	7b bd       	out	0x2b, r23	; 43
		OCR1B = 5000 * 0.05 + x2;
 28e:	6a bd       	out	0x2a, r22	; 42
 290:	60 91 00 01 	lds	r22, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 294:	70 91 01 01 	lds	r23, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 298:	07 2e       	mov	r0, r23
 29a:	00 0c       	add	r0, r0
 29c:	88 0b       	sbc	r24, r24
 29e:	99 0b       	sbc	r25, r25
 2a0:	fa d4       	rcall	.+2548   	; 0xc96 <__floatsisf>
 2a2:	20 e0       	ldi	r18, 0x00	; 0
 2a4:	30 e0       	ldi	r19, 0x00	; 0
 2a6:	4a e7       	ldi	r20, 0x7A	; 122
 2a8:	53 e4       	ldi	r21, 0x43	; 67
 2aa:	5f d4       	rcall	.+2238   	; 0xb6a <__addsf3>
 2ac:	c6 d4       	rcall	.+2444   	; 0xc3a <__fixunssfsi>
 2ae:	79 bd       	out	0x29, r23	; 41

		if(OCR1A != 5000 * 0.075 && OCR1B != 5000 * 0.075 )
 2b0:	68 bd       	out	0x28, r22	; 40
 2b2:	6a b5       	in	r22, 0x2a	; 42
 2b4:	7b b5       	in	r23, 0x2b	; 43
 2b6:	80 e0       	ldi	r24, 0x00	; 0
 2b8:	90 e0       	ldi	r25, 0x00	; 0
 2ba:	eb d4       	rcall	.+2518   	; 0xc92 <__floatunsisf>
 2bc:	20 e0       	ldi	r18, 0x00	; 0
 2be:	30 e8       	ldi	r19, 0x80	; 128
 2c0:	4b eb       	ldi	r20, 0xBB	; 187
 2c2:	53 e4       	ldi	r21, 0x43	; 67
 2c4:	b6 d4       	rcall	.+2412   	; 0xc32 <__cmpsf2>
 2c6:	88 23       	and	r24, r24
 2c8:	a9 f0       	breq	.+42     	; 0x2f4 <__vector_10+0x212>
 2ca:	68 b5       	in	r22, 0x28	; 40
 2cc:	79 b5       	in	r23, 0x29	; 41
 2ce:	80 e0       	ldi	r24, 0x00	; 0
 2d0:	90 e0       	ldi	r25, 0x00	; 0
 2d2:	df d4       	rcall	.+2494   	; 0xc92 <__floatunsisf>
 2d4:	20 e0       	ldi	r18, 0x00	; 0
 2d6:	30 e8       	ldi	r19, 0x80	; 128
 2d8:	4b eb       	ldi	r20, 0xBB	; 187
 2da:	53 e4       	ldi	r21, 0x43	; 67
 2dc:	aa d4       	rcall	.+2388   	; 0xc32 <__cmpsf2>
 2de:	88 23       	and	r24, r24
 2e0:	49 f0       	breq	.+18     	; 0x2f4 <__vector_10+0x212>
 2e2:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <x1>
		x1++;
 2e6:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <x1+0x1>
 2ea:	01 96       	adiw	r24, 0x01	; 1
 2ec:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <x1+0x1>
 2f0:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <x1>
		x2++;		
 2f4:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 2f8:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 2fc:	01 96       	adiw	r24, 0x01	; 1
 2fe:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 302:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
		
		cnt=0;
 306:	10 92 0b 01 	sts	0x010B, r1	; 0x80010b <cnt+0x1>
		if(OCR1A == 5000 * 0.075 && OCR1B == 5000 * 0.075 ){
 30a:	10 92 0a 01 	sts	0x010A, r1	; 0x80010a <cnt>
 30e:	6a b5       	in	r22, 0x2a	; 42
 310:	7b b5       	in	r23, 0x2b	; 43
 312:	80 e0       	ldi	r24, 0x00	; 0
 314:	90 e0       	ldi	r25, 0x00	; 0
 316:	bd d4       	rcall	.+2426   	; 0xc92 <__floatunsisf>
 318:	20 e0       	ldi	r18, 0x00	; 0
 31a:	30 e8       	ldi	r19, 0x80	; 128
 31c:	4b eb       	ldi	r20, 0xBB	; 187
 31e:	53 e4       	ldi	r21, 0x43	; 67
 320:	88 d4       	rcall	.+2320   	; 0xc32 <__cmpsf2>
 322:	81 11       	cpse	r24, r1
 324:	1d c0       	rjmp	.+58     	; 0x360 <__vector_10+0x27e>
 326:	68 b5       	in	r22, 0x28	; 40
 328:	79 b5       	in	r23, 0x29	; 41
 32a:	80 e0       	ldi	r24, 0x00	; 0
 32c:	90 e0       	ldi	r25, 0x00	; 0
 32e:	b1 d4       	rcall	.+2402   	; 0xc92 <__floatunsisf>
 330:	20 e0       	ldi	r18, 0x00	; 0
 332:	30 e8       	ldi	r19, 0x80	; 128
 334:	4b eb       	ldi	r20, 0xBB	; 187
 336:	53 e4       	ldi	r21, 0x43	; 67
 338:	7c d4       	rcall	.+2296   	; 0xc32 <__cmpsf2>
 33a:	81 11       	cpse	r24, r1
 33c:	11 c0       	rjmp	.+34     	; 0x360 <__vector_10+0x27e>
 33e:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <count>
			count++;
 342:	90 91 09 01 	lds	r25, 0x0109	; 0x800109 <count+0x1>
 346:	01 96       	adiw	r24, 0x01	; 1
 348:	90 93 09 01 	sts	0x0109, r25	; 0x800109 <count+0x1>
 34c:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <count>
 350:	10 92 03 01 	sts	0x0103, r1	; 0x800103 <x1+0x1>
			x1=0;
 354:	10 92 02 01 	sts	0x0102, r1	; 0x800102 <x1>
 358:	10 92 01 01 	sts	0x0101, r1	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
			x2=0;
 35c:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <__DATA_REGION_ORIGIN__>
 360:	e0 91 08 01 	lds	r30, 0x0108	; 0x800108 <count>
		}
	}
}

if(temper[count] =='c'){
 364:	f0 91 09 01 	lds	r31, 0x0109	; 0x800109 <count+0x1>
 368:	e4 5f       	subi	r30, 0xF4	; 244
 36a:	fe 4f       	sbci	r31, 0xFE	; 254
 36c:	80 81       	ld	r24, Z
 36e:	83 36       	cpi	r24, 0x63	; 99
 370:	09 f0       	breq	.+2      	; 0x374 <__vector_10+0x292>
 372:	8d c0       	rjmp	.+282    	; 0x48e <__LOCK_REGION_LENGTH__+0x8e>
 374:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <cnt>
	cnt++;
 378:	90 91 0b 01 	lds	r25, 0x010B	; 0x80010b <cnt+0x1>
 37c:	01 96       	adiw	r24, 0x01	; 1
 37e:	90 93 0b 01 	sts	0x010B, r25	; 0x80010b <cnt+0x1>
 382:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <cnt>
	if(cnt==1){ // 45도 -> 120도로 팔 들기 (c)
 386:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <cnt>
 38a:	90 91 0b 01 	lds	r25, 0x010B	; 0x80010b <cnt+0x1>
 38e:	01 97       	sbiw	r24, 0x01	; 1
		OCR1A= 5000 * 0.1 + x1;
 390:	09 f0       	breq	.+2      	; 0x394 <__vector_10+0x2b2>
 392:	7d c0       	rjmp	.+250    	; 0x48e <__LOCK_REGION_LENGTH__+0x8e>
 394:	60 91 02 01 	lds	r22, 0x0102	; 0x800102 <x1>
 398:	70 91 03 01 	lds	r23, 0x0103	; 0x800103 <x1+0x1>
 39c:	07 2e       	mov	r0, r23
 39e:	00 0c       	add	r0, r0
 3a0:	88 0b       	sbc	r24, r24
 3a2:	99 0b       	sbc	r25, r25
 3a4:	78 d4       	rcall	.+2288   	; 0xc96 <__floatsisf>
 3a6:	20 e0       	ldi	r18, 0x00	; 0
 3a8:	30 e0       	ldi	r19, 0x00	; 0
 3aa:	4a ef       	ldi	r20, 0xFA	; 250
 3ac:	53 e4       	ldi	r21, 0x43	; 67
 3ae:	dd d3       	rcall	.+1978   	; 0xb6a <__addsf3>
 3b0:	44 d4       	rcall	.+2184   	; 0xc3a <__fixunssfsi>
		OCR1B= 5000 * 0.05 - x2;
 3b2:	7b bd       	out	0x2b, r23	; 43
 3b4:	6a bd       	out	0x2a, r22	; 42
 3b6:	60 91 00 01 	lds	r22, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 3ba:	70 91 01 01 	lds	r23, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 3be:	07 2e       	mov	r0, r23
 3c0:	00 0c       	add	r0, r0
 3c2:	88 0b       	sbc	r24, r24
 3c4:	99 0b       	sbc	r25, r25
 3c6:	67 d4       	rcall	.+2254   	; 0xc96 <__floatsisf>
 3c8:	9b 01       	movw	r18, r22
 3ca:	ac 01       	movw	r20, r24
 3cc:	60 e0       	ldi	r22, 0x00	; 0
 3ce:	70 e0       	ldi	r23, 0x00	; 0
 3d0:	8a e7       	ldi	r24, 0x7A	; 122
 3d2:	93 e4       	ldi	r25, 0x43	; 67
 3d4:	c9 d3       	rcall	.+1938   	; 0xb68 <__subsf3>
 3d6:	31 d4       	rcall	.+2146   	; 0xc3a <__fixunssfsi>
 3d8:	79 bd       	out	0x29, r23	; 41

		if(OCR1A!=5000*0.118)
 3da:	68 bd       	out	0x28, r22	; 40
 3dc:	6a b5       	in	r22, 0x2a	; 42
 3de:	7b b5       	in	r23, 0x2b	; 43
 3e0:	80 e0       	ldi	r24, 0x00	; 0
 3e2:	90 e0       	ldi	r25, 0x00	; 0
 3e4:	56 d4       	rcall	.+2220   	; 0xc92 <__floatunsisf>
 3e6:	20 e0       	ldi	r18, 0x00	; 0
 3e8:	30 e8       	ldi	r19, 0x80	; 128
 3ea:	43 e1       	ldi	r20, 0x13	; 19
 3ec:	54 e4       	ldi	r21, 0x44	; 68
 3ee:	21 d4       	rcall	.+2114   	; 0xc32 <__cmpsf2>
 3f0:	88 23       	and	r24, r24
 3f2:	49 f0       	breq	.+18     	; 0x406 <__LOCK_REGION_LENGTH__+0x6>
 3f4:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <x1>
		x1++;
 3f8:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <x1+0x1>
 3fc:	01 96       	adiw	r24, 0x01	; 1
 3fe:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <x1+0x1>
 402:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <x1>
		if(OCR1B!=5000*0.025)
 406:	68 b5       	in	r22, 0x28	; 40
 408:	79 b5       	in	r23, 0x29	; 41
 40a:	80 e0       	ldi	r24, 0x00	; 0
 40c:	90 e0       	ldi	r25, 0x00	; 0
 40e:	41 d4       	rcall	.+2178   	; 0xc92 <__floatunsisf>
 410:	20 e0       	ldi	r18, 0x00	; 0
 412:	30 e0       	ldi	r19, 0x00	; 0
 414:	4a ef       	ldi	r20, 0xFA	; 250
 416:	52 e4       	ldi	r21, 0x42	; 66
 418:	0c d4       	rcall	.+2072   	; 0xc32 <__cmpsf2>
 41a:	88 23       	and	r24, r24
		x2++;	
 41c:	49 f0       	breq	.+18     	; 0x430 <__LOCK_REGION_LENGTH__+0x30>
 41e:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 422:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 426:	01 96       	adiw	r24, 0x01	; 1
 428:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 42c:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>

		cnt=0;
 430:	10 92 0b 01 	sts	0x010B, r1	; 0x80010b <cnt+0x1>
 434:	10 92 0a 01 	sts	0x010A, r1	; 0x80010a <cnt>
		if(OCR1A == 5000 * 0.118 && OCR1B ==5000 * 0.025){
 438:	6a b5       	in	r22, 0x2a	; 42
 43a:	7b b5       	in	r23, 0x2b	; 43
 43c:	80 e0       	ldi	r24, 0x00	; 0
 43e:	90 e0       	ldi	r25, 0x00	; 0
 440:	28 d4       	rcall	.+2128   	; 0xc92 <__floatunsisf>
 442:	20 e0       	ldi	r18, 0x00	; 0
 444:	30 e8       	ldi	r19, 0x80	; 128
 446:	43 e1       	ldi	r20, 0x13	; 19
 448:	54 e4       	ldi	r21, 0x44	; 68
 44a:	f3 d3       	rcall	.+2022   	; 0xc32 <__cmpsf2>
 44c:	81 11       	cpse	r24, r1
 44e:	1f c0       	rjmp	.+62     	; 0x48e <__LOCK_REGION_LENGTH__+0x8e>
 450:	68 b5       	in	r22, 0x28	; 40
 452:	79 b5       	in	r23, 0x29	; 41
 454:	80 e0       	ldi	r24, 0x00	; 0
 456:	90 e0       	ldi	r25, 0x00	; 0
 458:	1c d4       	rcall	.+2104   	; 0xc92 <__floatunsisf>
 45a:	20 e0       	ldi	r18, 0x00	; 0
 45c:	30 e0       	ldi	r19, 0x00	; 0
 45e:	4a ef       	ldi	r20, 0xFA	; 250
 460:	52 e4       	ldi	r21, 0x42	; 66
 462:	e7 d3       	rcall	.+1998   	; 0xc32 <__cmpsf2>
 464:	81 11       	cpse	r24, r1
 466:	13 c0       	rjmp	.+38     	; 0x48e <__LOCK_REGION_LENGTH__+0x8e>
 468:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <count>
			count++;
 46c:	90 91 09 01 	lds	r25, 0x0109	; 0x800109 <count+0x1>
 470:	01 96       	adiw	r24, 0x01	; 1
 472:	90 93 09 01 	sts	0x0109, r25	; 0x800109 <count+0x1>
 476:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <count>
 47a:	10 92 03 01 	sts	0x0103, r1	; 0x800103 <x1+0x1>
			x1=0;
 47e:	10 92 02 01 	sts	0x0102, r1	; 0x800102 <x1>
 482:	10 92 01 01 	sts	0x0101, r1	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
			x2=0;
 486:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <__DATA_REGION_ORIGIN__>
 48a:	83 e6       	ldi	r24, 0x63	; 99
		UART0_Transmit('c');
 48c:	26 de       	rcall	.-948    	; 0xda <UART0_Transmit>
 48e:	e0 91 08 01 	lds	r30, 0x0108	; 0x800108 <count>
		}
	}

}

if(temper[count] =='d'){
 492:	f0 91 09 01 	lds	r31, 0x0109	; 0x800109 <count+0x1>
 496:	e4 5f       	subi	r30, 0xF4	; 244
 498:	fe 4f       	sbci	r31, 0xFE	; 254
 49a:	80 81       	ld	r24, Z
 49c:	84 36       	cpi	r24, 0x64	; 100
 49e:	09 f0       	breq	.+2      	; 0x4a2 <__LOCK_REGION_LENGTH__+0xa2>
 4a0:	8d c0       	rjmp	.+282    	; 0x5bc <__LOCK_REGION_LENGTH__+0x1bc>
 4a2:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <cnt>
	cnt++;
 4a6:	90 91 0b 01 	lds	r25, 0x010B	; 0x80010b <cnt+0x1>
 4aa:	01 96       	adiw	r24, 0x01	; 1
 4ac:	90 93 0b 01 	sts	0x010B, r25	; 0x80010b <cnt+0x1>
	if(cnt==5){ // 120도 -> 45도로 팔 내리기 (d)
 4b0:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <cnt>
 4b4:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <cnt>
 4b8:	90 91 0b 01 	lds	r25, 0x010B	; 0x80010b <cnt+0x1>
		OCR1A= 5000 * 0.118 - x1;
 4bc:	05 97       	sbiw	r24, 0x05	; 5
 4be:	09 f0       	breq	.+2      	; 0x4c2 <__LOCK_REGION_LENGTH__+0xc2>
 4c0:	7d c0       	rjmp	.+250    	; 0x5bc <__LOCK_REGION_LENGTH__+0x1bc>
 4c2:	60 91 02 01 	lds	r22, 0x0102	; 0x800102 <x1>
 4c6:	70 91 03 01 	lds	r23, 0x0103	; 0x800103 <x1+0x1>
 4ca:	07 2e       	mov	r0, r23
 4cc:	00 0c       	add	r0, r0
 4ce:	88 0b       	sbc	r24, r24
 4d0:	99 0b       	sbc	r25, r25
 4d2:	e1 d3       	rcall	.+1986   	; 0xc96 <__floatsisf>
 4d4:	9b 01       	movw	r18, r22
 4d6:	ac 01       	movw	r20, r24
 4d8:	60 e0       	ldi	r22, 0x00	; 0
 4da:	70 e8       	ldi	r23, 0x80	; 128
 4dc:	83 e1       	ldi	r24, 0x13	; 19
 4de:	94 e4       	ldi	r25, 0x44	; 68
 4e0:	43 d3       	rcall	.+1670   	; 0xb68 <__subsf3>
 4e2:	ab d3       	rcall	.+1878   	; 0xc3a <__fixunssfsi>
		OCR1B= 5000 * 0.025 + x2;
 4e4:	7b bd       	out	0x2b, r23	; 43
 4e6:	6a bd       	out	0x2a, r22	; 42
 4e8:	60 91 00 01 	lds	r22, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 4ec:	70 91 01 01 	lds	r23, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 4f0:	07 2e       	mov	r0, r23
 4f2:	00 0c       	add	r0, r0
 4f4:	88 0b       	sbc	r24, r24
 4f6:	99 0b       	sbc	r25, r25
 4f8:	ce d3       	rcall	.+1948   	; 0xc96 <__floatsisf>
 4fa:	20 e0       	ldi	r18, 0x00	; 0
 4fc:	30 e0       	ldi	r19, 0x00	; 0
 4fe:	4a ef       	ldi	r20, 0xFA	; 250
 500:	52 e4       	ldi	r21, 0x42	; 66
 502:	33 d3       	rcall	.+1638   	; 0xb6a <__addsf3>
 504:	9a d3       	rcall	.+1844   	; 0xc3a <__fixunssfsi>
 506:	79 bd       	out	0x29, r23	; 41
 508:	68 bd       	out	0x28, r22	; 40

		if(OCR1A!=5000*0.1)
 50a:	6a b5       	in	r22, 0x2a	; 42
 50c:	7b b5       	in	r23, 0x2b	; 43
 50e:	80 e0       	ldi	r24, 0x00	; 0
 510:	90 e0       	ldi	r25, 0x00	; 0
 512:	bf d3       	rcall	.+1918   	; 0xc92 <__floatunsisf>
 514:	20 e0       	ldi	r18, 0x00	; 0
 516:	30 e0       	ldi	r19, 0x00	; 0
 518:	4a ef       	ldi	r20, 0xFA	; 250
 51a:	53 e4       	ldi	r21, 0x43	; 67
 51c:	8a d3       	rcall	.+1812   	; 0xc32 <__cmpsf2>
 51e:	88 23       	and	r24, r24
 520:	49 f0       	breq	.+18     	; 0x534 <__LOCK_REGION_LENGTH__+0x134>
		x1++;
 522:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <x1>
 526:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <x1+0x1>
 52a:	01 96       	adiw	r24, 0x01	; 1
 52c:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <x1+0x1>
 530:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <x1>
		if(OCR1B!=5000*0.05)
 534:	68 b5       	in	r22, 0x28	; 40
 536:	79 b5       	in	r23, 0x29	; 41
 538:	80 e0       	ldi	r24, 0x00	; 0
 53a:	90 e0       	ldi	r25, 0x00	; 0
 53c:	aa d3       	rcall	.+1876   	; 0xc92 <__floatunsisf>
 53e:	20 e0       	ldi	r18, 0x00	; 0
 540:	30 e0       	ldi	r19, 0x00	; 0
 542:	4a e7       	ldi	r20, 0x7A	; 122
 544:	53 e4       	ldi	r21, 0x43	; 67
 546:	75 d3       	rcall	.+1770   	; 0xc32 <__cmpsf2>
 548:	88 23       	and	r24, r24
 54a:	49 f0       	breq	.+18     	; 0x55e <__LOCK_REGION_LENGTH__+0x15e>
 54c:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
		x2++;
 550:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 554:	01 96       	adiw	r24, 0x01	; 1
 556:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 55a:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
		
		cnt=0;
 55e:	10 92 0b 01 	sts	0x010B, r1	; 0x80010b <cnt+0x1>
 562:	10 92 0a 01 	sts	0x010A, r1	; 0x80010a <cnt>
		if(OCR1A == 5000 * 0.095 && OCR1B ==5000 * 0.05){
 566:	6a b5       	in	r22, 0x2a	; 42
 568:	7b b5       	in	r23, 0x2b	; 43
 56a:	80 e0       	ldi	r24, 0x00	; 0
 56c:	90 e0       	ldi	r25, 0x00	; 0
 56e:	91 d3       	rcall	.+1826   	; 0xc92 <__floatunsisf>
 570:	20 e0       	ldi	r18, 0x00	; 0
 572:	30 e8       	ldi	r19, 0x80	; 128
 574:	4d ee       	ldi	r20, 0xED	; 237
 576:	53 e4       	ldi	r21, 0x43	; 67
 578:	5c d3       	rcall	.+1720   	; 0xc32 <__cmpsf2>
 57a:	81 11       	cpse	r24, r1
 57c:	1f c0       	rjmp	.+62     	; 0x5bc <__LOCK_REGION_LENGTH__+0x1bc>
 57e:	68 b5       	in	r22, 0x28	; 40
 580:	79 b5       	in	r23, 0x29	; 41
 582:	80 e0       	ldi	r24, 0x00	; 0
 584:	90 e0       	ldi	r25, 0x00	; 0
 586:	85 d3       	rcall	.+1802   	; 0xc92 <__floatunsisf>
 588:	20 e0       	ldi	r18, 0x00	; 0
 58a:	30 e0       	ldi	r19, 0x00	; 0
 58c:	4a e7       	ldi	r20, 0x7A	; 122
 58e:	53 e4       	ldi	r21, 0x43	; 67
 590:	50 d3       	rcall	.+1696   	; 0xc32 <__cmpsf2>
 592:	81 11       	cpse	r24, r1
 594:	13 c0       	rjmp	.+38     	; 0x5bc <__LOCK_REGION_LENGTH__+0x1bc>
 596:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <count>
 59a:	90 91 09 01 	lds	r25, 0x0109	; 0x800109 <count+0x1>
			count++;
 59e:	01 96       	adiw	r24, 0x01	; 1
 5a0:	90 93 09 01 	sts	0x0109, r25	; 0x800109 <count+0x1>
 5a4:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <count>
 5a8:	10 92 03 01 	sts	0x0103, r1	; 0x800103 <x1+0x1>
			x1=0;
 5ac:	10 92 02 01 	sts	0x0102, r1	; 0x800102 <x1>
 5b0:	10 92 01 01 	sts	0x0101, r1	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
			x2=0;
 5b4:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <__DATA_REGION_ORIGIN__>
		UART0_Transmit('d');
 5b8:	84 e6       	ldi	r24, 0x64	; 100
 5ba:	8f dd       	rcall	.-1250   	; 0xda <UART0_Transmit>
 5bc:	e0 91 08 01 	lds	r30, 0x0108	; 0x800108 <count>
	}

}


if(temper[count] =='e'){
 5c0:	f0 91 09 01 	lds	r31, 0x0109	; 0x800109 <count+0x1>
 5c4:	e4 5f       	subi	r30, 0xF4	; 244
 5c6:	fe 4f       	sbci	r31, 0xFE	; 254
 5c8:	80 81       	ld	r24, Z
 5ca:	85 36       	cpi	r24, 0x65	; 101
 5cc:	09 f0       	breq	.+2      	; 0x5d0 <__LOCK_REGION_LENGTH__+0x1d0>
	cnt++;
 5ce:	95 c0       	rjmp	.+298    	; 0x6fa <__LOCK_REGION_LENGTH__+0x2fa>
 5d0:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <cnt>
 5d4:	90 91 0b 01 	lds	r25, 0x010B	; 0x80010b <cnt+0x1>
 5d8:	01 96       	adiw	r24, 0x01	; 1
 5da:	90 93 0b 01 	sts	0x010B, r25	; 0x80010b <cnt+0x1>
	if(cnt==10){ // 박스 잡기 0도 -> 45도 (e)
 5de:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <cnt>
 5e2:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <cnt>
 5e6:	90 91 0b 01 	lds	r25, 0x010B	; 0x80010b <cnt+0x1>
		OCR3A= 5000 * 0.075 + x1;
 5ea:	0a 97       	sbiw	r24, 0x0a	; 10
 5ec:	09 f0       	breq	.+2      	; 0x5f0 <__LOCK_REGION_LENGTH__+0x1f0>
 5ee:	85 c0       	rjmp	.+266    	; 0x6fa <__LOCK_REGION_LENGTH__+0x2fa>
 5f0:	60 91 02 01 	lds	r22, 0x0102	; 0x800102 <x1>
 5f4:	70 91 03 01 	lds	r23, 0x0103	; 0x800103 <x1+0x1>
 5f8:	07 2e       	mov	r0, r23
 5fa:	00 0c       	add	r0, r0
 5fc:	88 0b       	sbc	r24, r24
 5fe:	99 0b       	sbc	r25, r25
 600:	4a d3       	rcall	.+1684   	; 0xc96 <__floatsisf>
 602:	20 e0       	ldi	r18, 0x00	; 0
 604:	30 e8       	ldi	r19, 0x80	; 128
 606:	4b eb       	ldi	r20, 0xBB	; 187
 608:	53 e4       	ldi	r21, 0x43	; 67
 60a:	af d2       	rcall	.+1374   	; 0xb6a <__addsf3>
 60c:	16 d3       	rcall	.+1580   	; 0xc3a <__fixunssfsi>
 60e:	c6 e8       	ldi	r28, 0x86	; 134
 610:	d0 e0       	ldi	r29, 0x00	; 0
		OCR3B= 5000 * 0.075 - x2;
 612:	79 83       	std	Y+1, r23	; 0x01
 614:	68 83       	st	Y, r22
 616:	60 91 00 01 	lds	r22, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 61a:	70 91 01 01 	lds	r23, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 61e:	07 2e       	mov	r0, r23
 620:	00 0c       	add	r0, r0
 622:	88 0b       	sbc	r24, r24
 624:	99 0b       	sbc	r25, r25
 626:	37 d3       	rcall	.+1646   	; 0xc96 <__floatsisf>
 628:	9b 01       	movw	r18, r22
 62a:	ac 01       	movw	r20, r24
 62c:	60 e0       	ldi	r22, 0x00	; 0
 62e:	70 e8       	ldi	r23, 0x80	; 128
 630:	8b eb       	ldi	r24, 0xBB	; 187
 632:	93 e4       	ldi	r25, 0x43	; 67
 634:	99 d2       	rcall	.+1330   	; 0xb68 <__subsf3>
 636:	01 d3       	rcall	.+1538   	; 0xc3a <__fixunssfsi>
 638:	70 93 85 00 	sts	0x0085, r23	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
 63c:	60 93 84 00 	sts	0x0084, r22	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>

		if(OCR3A!=5000*0.097 && OCR3B!=5000*0.052)
 640:	68 81       	ld	r22, Y
 642:	79 81       	ldd	r23, Y+1	; 0x01
 644:	80 e0       	ldi	r24, 0x00	; 0
 646:	90 e0       	ldi	r25, 0x00	; 0
 648:	24 d3       	rcall	.+1608   	; 0xc92 <__floatunsisf>
 64a:	20 e0       	ldi	r18, 0x00	; 0
 64c:	30 e8       	ldi	r19, 0x80	; 128
 64e:	42 ef       	ldi	r20, 0xF2	; 242
 650:	53 e4       	ldi	r21, 0x43	; 67
 652:	ef d2       	rcall	.+1502   	; 0xc32 <__cmpsf2>
 654:	88 23       	and	r24, r24
 656:	b9 f0       	breq	.+46     	; 0x686 <__LOCK_REGION_LENGTH__+0x286>
 658:	60 91 84 00 	lds	r22, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
 65c:	70 91 85 00 	lds	r23, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
 660:	80 e0       	ldi	r24, 0x00	; 0
 662:	90 e0       	ldi	r25, 0x00	; 0
 664:	16 d3       	rcall	.+1580   	; 0xc92 <__floatunsisf>
 666:	20 e0       	ldi	r18, 0x00	; 0
 668:	30 e0       	ldi	r19, 0x00	; 0
 66a:	42 e8       	ldi	r20, 0x82	; 130
 66c:	53 e4       	ldi	r21, 0x43	; 67
 66e:	e1 d2       	rcall	.+1474   	; 0xc32 <__cmpsf2>
 670:	88 23       	and	r24, r24
 672:	49 f0       	breq	.+18     	; 0x686 <__LOCK_REGION_LENGTH__+0x286>
 674:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <x1>
		x1++;
 678:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <x1+0x1>
 67c:	01 96       	adiw	r24, 0x01	; 1
 67e:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <x1+0x1>
 682:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <x1>
 686:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
		x2++;	
 68a:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 68e:	01 96       	adiw	r24, 0x01	; 1
 690:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 694:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
 698:	10 92 0b 01 	sts	0x010B, r1	; 0x80010b <cnt+0x1>
		cnt=0;
 69c:	10 92 0a 01 	sts	0x010A, r1	; 0x80010a <cnt>
 6a0:	60 91 86 00 	lds	r22, 0x0086	; 0x800086 <__TEXT_REGION_LENGTH__+0x7e0086>
		if(OCR3A == 5000 * 0.097 && OCR3B ==5000 * 0.052){
 6a4:	70 91 87 00 	lds	r23, 0x0087	; 0x800087 <__TEXT_REGION_LENGTH__+0x7e0087>
 6a8:	80 e0       	ldi	r24, 0x00	; 0
 6aa:	90 e0       	ldi	r25, 0x00	; 0
 6ac:	f2 d2       	rcall	.+1508   	; 0xc92 <__floatunsisf>
 6ae:	20 e0       	ldi	r18, 0x00	; 0
 6b0:	30 e8       	ldi	r19, 0x80	; 128
 6b2:	42 ef       	ldi	r20, 0xF2	; 242
 6b4:	53 e4       	ldi	r21, 0x43	; 67
 6b6:	bd d2       	rcall	.+1402   	; 0xc32 <__cmpsf2>
 6b8:	81 11       	cpse	r24, r1
 6ba:	1f c0       	rjmp	.+62     	; 0x6fa <__LOCK_REGION_LENGTH__+0x2fa>
 6bc:	60 91 84 00 	lds	r22, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
 6c0:	70 91 85 00 	lds	r23, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
 6c4:	80 e0       	ldi	r24, 0x00	; 0
 6c6:	90 e0       	ldi	r25, 0x00	; 0
 6c8:	e4 d2       	rcall	.+1480   	; 0xc92 <__floatunsisf>
 6ca:	20 e0       	ldi	r18, 0x00	; 0
 6cc:	30 e0       	ldi	r19, 0x00	; 0
 6ce:	42 e8       	ldi	r20, 0x82	; 130
 6d0:	53 e4       	ldi	r21, 0x43	; 67
 6d2:	af d2       	rcall	.+1374   	; 0xc32 <__cmpsf2>
 6d4:	81 11       	cpse	r24, r1
 6d6:	11 c0       	rjmp	.+34     	; 0x6fa <__LOCK_REGION_LENGTH__+0x2fa>
 6d8:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <count>
			count++;
 6dc:	90 91 09 01 	lds	r25, 0x0109	; 0x800109 <count+0x1>
 6e0:	01 96       	adiw	r24, 0x01	; 1
 6e2:	90 93 09 01 	sts	0x0109, r25	; 0x800109 <count+0x1>
 6e6:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <count>
			x1=0;
 6ea:	10 92 03 01 	sts	0x0103, r1	; 0x800103 <x1+0x1>
 6ee:	10 92 02 01 	sts	0x0102, r1	; 0x800102 <x1>
			x2=0;
 6f2:	10 92 01 01 	sts	0x0101, r1	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 6f6:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <__DATA_REGION_ORIGIN__>
		}
	}
}

if(temper[count] =='f'){
 6fa:	e0 91 08 01 	lds	r30, 0x0108	; 0x800108 <count>
 6fe:	f0 91 09 01 	lds	r31, 0x0109	; 0x800109 <count+0x1>
 702:	e4 5f       	subi	r30, 0xF4	; 244
 704:	fe 4f       	sbci	r31, 0xFE	; 254
 706:	80 81       	ld	r24, Z
 708:	86 36       	cpi	r24, 0x66	; 102
 70a:	09 f0       	breq	.+2      	; 0x70e <__LOCK_REGION_LENGTH__+0x30e>
	cnt++;
 70c:	71 c0       	rjmp	.+226    	; 0x7f0 <__LOCK_REGION_LENGTH__+0x3f0>
 70e:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <cnt>
 712:	90 91 0b 01 	lds	r25, 0x010B	; 0x80010b <cnt+0x1>
 716:	01 96       	adiw	r24, 0x01	; 1
 718:	90 93 0b 01 	sts	0x010B, r25	; 0x80010b <cnt+0x1>
 71c:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <cnt>
	if(cnt==10){ // 박스 놓기 45도 -> 0도 (f)
 720:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <cnt>
 724:	90 91 0b 01 	lds	r25, 0x010B	; 0x80010b <cnt+0x1>
 728:	0a 97       	sbiw	r24, 0x0a	; 10
 72a:	09 f0       	breq	.+2      	; 0x72e <__LOCK_REGION_LENGTH__+0x32e>
		OCR3A= 5000 * 0.095 - x1;
 72c:	61 c0       	rjmp	.+194    	; 0x7f0 <__LOCK_REGION_LENGTH__+0x3f0>
 72e:	60 91 02 01 	lds	r22, 0x0102	; 0x800102 <x1>
 732:	70 91 03 01 	lds	r23, 0x0103	; 0x800103 <x1+0x1>
 736:	07 2e       	mov	r0, r23
 738:	00 0c       	add	r0, r0
 73a:	88 0b       	sbc	r24, r24
 73c:	99 0b       	sbc	r25, r25
 73e:	ab d2       	rcall	.+1366   	; 0xc96 <__floatsisf>
 740:	9b 01       	movw	r18, r22
 742:	ac 01       	movw	r20, r24
 744:	60 e0       	ldi	r22, 0x00	; 0
 746:	70 e8       	ldi	r23, 0x80	; 128
 748:	8d ee       	ldi	r24, 0xED	; 237
 74a:	93 e4       	ldi	r25, 0x43	; 67
 74c:	0d d2       	rcall	.+1050   	; 0xb68 <__subsf3>
 74e:	75 d2       	rcall	.+1258   	; 0xc3a <__fixunssfsi>
 750:	c6 e8       	ldi	r28, 0x86	; 134
 752:	d0 e0       	ldi	r29, 0x00	; 0
 754:	79 83       	std	Y+1, r23	; 0x01
 756:	68 83       	st	Y, r22
 758:	60 91 00 01 	lds	r22, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
		OCR3B= 5000 * 0.055 + x2;
 75c:	70 91 01 01 	lds	r23, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 760:	07 2e       	mov	r0, r23
 762:	00 0c       	add	r0, r0
 764:	88 0b       	sbc	r24, r24
 766:	99 0b       	sbc	r25, r25
 768:	96 d2       	rcall	.+1324   	; 0xc96 <__floatsisf>
 76a:	20 e0       	ldi	r18, 0x00	; 0
 76c:	30 e8       	ldi	r19, 0x80	; 128
 76e:	49 e8       	ldi	r20, 0x89	; 137
 770:	53 e4       	ldi	r21, 0x43	; 67
 772:	fb d1       	rcall	.+1014   	; 0xb6a <__addsf3>
 774:	62 d2       	rcall	.+1220   	; 0xc3a <__fixunssfsi>
 776:	e4 e8       	ldi	r30, 0x84	; 132
 778:	f0 e0       	ldi	r31, 0x00	; 0
 77a:	71 83       	std	Z+1, r23	; 0x01
 77c:	60 83       	st	Z, r22
 77e:	28 81       	ld	r18, Y
 780:	39 81       	ldd	r19, Y+1	; 0x01
 782:	80 81       	ld	r24, Z
 784:	91 81       	ldd	r25, Z+1	; 0x01
 786:	28 17       	cp	r18, r24

		if(OCR3A != OCR3B)
 788:	39 07       	cpc	r19, r25
 78a:	49 f0       	breq	.+18     	; 0x79e <__LOCK_REGION_LENGTH__+0x39e>
 78c:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <x1>
 790:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <x1+0x1>
 794:	01 96       	adiw	r24, 0x01	; 1
		x1++;
 796:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <x1+0x1>
 79a:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <x1>
 79e:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 7a2:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
		x2++;
 7a6:	01 96       	adiw	r24, 0x01	; 1
 7a8:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 7ac:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
 7b0:	10 92 0b 01 	sts	0x010B, r1	; 0x80010b <cnt+0x1>
		
		cnt=0;
 7b4:	10 92 0a 01 	sts	0x010A, r1	; 0x80010a <cnt>
 7b8:	20 91 86 00 	lds	r18, 0x0086	; 0x800086 <__TEXT_REGION_LENGTH__+0x7e0086>
		if(OCR3A == OCR3B){
 7bc:	30 91 87 00 	lds	r19, 0x0087	; 0x800087 <__TEXT_REGION_LENGTH__+0x7e0087>
 7c0:	80 91 84 00 	lds	r24, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
 7c4:	90 91 85 00 	lds	r25, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
 7c8:	28 17       	cp	r18, r24
 7ca:	39 07       	cpc	r19, r25
 7cc:	89 f4       	brne	.+34     	; 0x7f0 <__LOCK_REGION_LENGTH__+0x3f0>
			count++;
 7ce:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <count>
 7d2:	90 91 09 01 	lds	r25, 0x0109	; 0x800109 <count+0x1>
 7d6:	01 96       	adiw	r24, 0x01	; 1
 7d8:	90 93 09 01 	sts	0x0109, r25	; 0x800109 <count+0x1>
 7dc:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <count>
			x1=0;
 7e0:	10 92 03 01 	sts	0x0103, r1	; 0x800103 <x1+0x1>
			x2=0;
 7e4:	10 92 02 01 	sts	0x0102, r1	; 0x800102 <x1>
 7e8:	10 92 01 01 	sts	0x0101, r1	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
		}
	}
}
	
if(temper[count] =='g'){
 7ec:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <__DATA_REGION_ORIGIN__>
 7f0:	e0 91 08 01 	lds	r30, 0x0108	; 0x800108 <count>
 7f4:	f0 91 09 01 	lds	r31, 0x0109	; 0x800109 <count+0x1>
 7f8:	e4 5f       	subi	r30, 0xF4	; 244
 7fa:	fe 4f       	sbci	r31, 0xFE	; 254
	cnt++;
 7fc:	80 81       	ld	r24, Z
 7fe:	87 36       	cpi	r24, 0x67	; 103
 800:	09 f0       	breq	.+2      	; 0x804 <__LOCK_REGION_LENGTH__+0x404>
 802:	8b c0       	rjmp	.+278    	; 0x91a <__LOCK_REGION_LENGTH__+0x51a>
 804:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <cnt>
 808:	90 91 0b 01 	lds	r25, 0x010B	; 0x80010b <cnt+0x1>
 80c:	01 96       	adiw	r24, 0x01	; 1
	if(cnt==10){ // 팔 내리기 0도 -> -45도 (g)
 80e:	90 93 0b 01 	sts	0x010B, r25	; 0x80010b <cnt+0x1>
 812:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <cnt>
 816:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <cnt>
 81a:	90 91 0b 01 	lds	r25, 0x010B	; 0x80010b <cnt+0x1>
		OCR1A= 5000 * 0.075 - x1;
 81e:	0a 97       	sbiw	r24, 0x0a	; 10
 820:	09 f0       	breq	.+2      	; 0x824 <__LOCK_REGION_LENGTH__+0x424>
 822:	7b c0       	rjmp	.+246    	; 0x91a <__LOCK_REGION_LENGTH__+0x51a>
 824:	60 91 02 01 	lds	r22, 0x0102	; 0x800102 <x1>
 828:	70 91 03 01 	lds	r23, 0x0103	; 0x800103 <x1+0x1>
 82c:	07 2e       	mov	r0, r23
 82e:	00 0c       	add	r0, r0
 830:	88 0b       	sbc	r24, r24
 832:	99 0b       	sbc	r25, r25
 834:	30 d2       	rcall	.+1120   	; 0xc96 <__floatsisf>
 836:	9b 01       	movw	r18, r22
 838:	ac 01       	movw	r20, r24
 83a:	60 e0       	ldi	r22, 0x00	; 0
 83c:	70 e8       	ldi	r23, 0x80	; 128
 83e:	8b eb       	ldi	r24, 0xBB	; 187
 840:	93 e4       	ldi	r25, 0x43	; 67
 842:	92 d1       	rcall	.+804    	; 0xb68 <__subsf3>
		OCR1B= 5000 * 0.075 + x2;
 844:	fa d1       	rcall	.+1012   	; 0xc3a <__fixunssfsi>
 846:	7b bd       	out	0x2b, r23	; 43
 848:	6a bd       	out	0x2a, r22	; 42
 84a:	60 91 00 01 	lds	r22, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 84e:	70 91 01 01 	lds	r23, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 852:	07 2e       	mov	r0, r23
 854:	00 0c       	add	r0, r0
 856:	88 0b       	sbc	r24, r24
 858:	99 0b       	sbc	r25, r25
 85a:	1d d2       	rcall	.+1082   	; 0xc96 <__floatsisf>
 85c:	20 e0       	ldi	r18, 0x00	; 0
 85e:	30 e8       	ldi	r19, 0x80	; 128
 860:	4b eb       	ldi	r20, 0xBB	; 187
 862:	53 e4       	ldi	r21, 0x43	; 67
 864:	82 d1       	rcall	.+772    	; 0xb6a <__addsf3>
 866:	e9 d1       	rcall	.+978    	; 0xc3a <__fixunssfsi>
 868:	79 bd       	out	0x29, r23	; 41

		if(OCR1A != 5000 * 0.05 && OCR1B != 5000 * 0.1)
 86a:	68 bd       	out	0x28, r22	; 40
 86c:	6a b5       	in	r22, 0x2a	; 42
 86e:	7b b5       	in	r23, 0x2b	; 43
 870:	80 e0       	ldi	r24, 0x00	; 0
 872:	90 e0       	ldi	r25, 0x00	; 0
 874:	0e d2       	rcall	.+1052   	; 0xc92 <__floatunsisf>
 876:	20 e0       	ldi	r18, 0x00	; 0
 878:	30 e0       	ldi	r19, 0x00	; 0
 87a:	4a e7       	ldi	r20, 0x7A	; 122
 87c:	53 e4       	ldi	r21, 0x43	; 67
 87e:	d9 d1       	rcall	.+946    	; 0xc32 <__cmpsf2>
 880:	88 23       	and	r24, r24
 882:	a9 f0       	breq	.+42     	; 0x8ae <__LOCK_REGION_LENGTH__+0x4ae>
 884:	68 b5       	in	r22, 0x28	; 40
 886:	79 b5       	in	r23, 0x29	; 41
 888:	80 e0       	ldi	r24, 0x00	; 0
 88a:	90 e0       	ldi	r25, 0x00	; 0
 88c:	02 d2       	rcall	.+1028   	; 0xc92 <__floatunsisf>
 88e:	20 e0       	ldi	r18, 0x00	; 0
 890:	30 e0       	ldi	r19, 0x00	; 0
 892:	4a ef       	ldi	r20, 0xFA	; 250
 894:	53 e4       	ldi	r21, 0x43	; 67
 896:	cd d1       	rcall	.+922    	; 0xc32 <__cmpsf2>
 898:	88 23       	and	r24, r24
 89a:	49 f0       	breq	.+18     	; 0x8ae <__LOCK_REGION_LENGTH__+0x4ae>
 89c:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <x1>
 8a0:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <x1+0x1>
		x1++;
 8a4:	01 96       	adiw	r24, 0x01	; 1
 8a6:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <x1+0x1>
 8aa:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <x1>
 8ae:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 8b2:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
		x2++;
 8b6:	01 96       	adiw	r24, 0x01	; 1
 8b8:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 8bc:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
		
		cnt=0;
 8c0:	10 92 0b 01 	sts	0x010B, r1	; 0x80010b <cnt+0x1>
 8c4:	10 92 0a 01 	sts	0x010A, r1	; 0x80010a <cnt>
		if(OCR1A == 5000 * 0.05 && OCR1B ==5000 * 0.1){
 8c8:	6a b5       	in	r22, 0x2a	; 42
 8ca:	7b b5       	in	r23, 0x2b	; 43
 8cc:	80 e0       	ldi	r24, 0x00	; 0
 8ce:	90 e0       	ldi	r25, 0x00	; 0
 8d0:	e0 d1       	rcall	.+960    	; 0xc92 <__floatunsisf>
 8d2:	20 e0       	ldi	r18, 0x00	; 0
 8d4:	30 e0       	ldi	r19, 0x00	; 0
 8d6:	4a e7       	ldi	r20, 0x7A	; 122
 8d8:	53 e4       	ldi	r21, 0x43	; 67
 8da:	ab d1       	rcall	.+854    	; 0xc32 <__cmpsf2>
 8dc:	81 11       	cpse	r24, r1
 8de:	1d c0       	rjmp	.+58     	; 0x91a <__LOCK_REGION_LENGTH__+0x51a>
 8e0:	68 b5       	in	r22, 0x28	; 40
 8e2:	79 b5       	in	r23, 0x29	; 41
 8e4:	80 e0       	ldi	r24, 0x00	; 0
 8e6:	90 e0       	ldi	r25, 0x00	; 0
 8e8:	d4 d1       	rcall	.+936    	; 0xc92 <__floatunsisf>
 8ea:	20 e0       	ldi	r18, 0x00	; 0
 8ec:	30 e0       	ldi	r19, 0x00	; 0
 8ee:	4a ef       	ldi	r20, 0xFA	; 250
 8f0:	53 e4       	ldi	r21, 0x43	; 67
 8f2:	9f d1       	rcall	.+830    	; 0xc32 <__cmpsf2>
 8f4:	81 11       	cpse	r24, r1
 8f6:	11 c0       	rjmp	.+34     	; 0x91a <__LOCK_REGION_LENGTH__+0x51a>
 8f8:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <count>
			count++;
 8fc:	90 91 09 01 	lds	r25, 0x0109	; 0x800109 <count+0x1>
 900:	01 96       	adiw	r24, 0x01	; 1
 902:	90 93 09 01 	sts	0x0109, r25	; 0x800109 <count+0x1>
 906:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <count>
 90a:	10 92 03 01 	sts	0x0103, r1	; 0x800103 <x1+0x1>
			x1=0;
 90e:	10 92 02 01 	sts	0x0102, r1	; 0x800102 <x1>
 912:	10 92 01 01 	sts	0x0101, r1	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
			x2=0;
 916:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <__DATA_REGION_ORIGIN__>
 91a:	e0 91 08 01 	lds	r30, 0x0108	; 0x800108 <count>
		}
	}
}

if(temper[count] =='h'){
 91e:	f0 91 09 01 	lds	r31, 0x0109	; 0x800109 <count+0x1>
 922:	e4 5f       	subi	r30, 0xF4	; 244
 924:	fe 4f       	sbci	r31, 0xFE	; 254
 926:	80 81       	ld	r24, Z
 928:	88 36       	cpi	r24, 0x68	; 104
 92a:	09 f0       	breq	.+2      	; 0x92e <__LOCK_REGION_LENGTH__+0x52e>
 92c:	69 c0       	rjmp	.+210    	; 0xa00 <__LOCK_REGION_LENGTH__+0x600>
 92e:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <cnt>
	cnt++;
 932:	90 91 0b 01 	lds	r25, 0x010B	; 0x80010b <cnt+0x1>
 936:	01 96       	adiw	r24, 0x01	; 1
 938:	90 93 0b 01 	sts	0x010B, r25	; 0x80010b <cnt+0x1>
 93c:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <cnt>
 940:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <cnt>
	if(cnt==10){ // 팔 올리기 0도 <- -45도 (g)
 944:	90 91 0b 01 	lds	r25, 0x010B	; 0x80010b <cnt+0x1>
 948:	0a 97       	sbiw	r24, 0x0a	; 10
 94a:	09 f0       	breq	.+2      	; 0x94e <__LOCK_REGION_LENGTH__+0x54e>
 94c:	59 c0       	rjmp	.+178    	; 0xa00 <__LOCK_REGION_LENGTH__+0x600>
 94e:	60 91 02 01 	lds	r22, 0x0102	; 0x800102 <x1>
		OCR1A= 5000 * 0.05 + x1;
 952:	70 91 03 01 	lds	r23, 0x0103	; 0x800103 <x1+0x1>
 956:	07 2e       	mov	r0, r23
 958:	00 0c       	add	r0, r0
 95a:	88 0b       	sbc	r24, r24
 95c:	99 0b       	sbc	r25, r25
 95e:	9b d1       	rcall	.+822    	; 0xc96 <__floatsisf>
 960:	20 e0       	ldi	r18, 0x00	; 0
 962:	30 e0       	ldi	r19, 0x00	; 0
 964:	4a e7       	ldi	r20, 0x7A	; 122
 966:	53 e4       	ldi	r21, 0x43	; 67
 968:	00 d1       	rcall	.+512    	; 0xb6a <__addsf3>
 96a:	67 d1       	rcall	.+718    	; 0xc3a <__fixunssfsi>
 96c:	7b bd       	out	0x2b, r23	; 43
 96e:	6a bd       	out	0x2a, r22	; 42
 970:	60 91 00 01 	lds	r22, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 974:	70 91 01 01 	lds	r23, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 978:	07 2e       	mov	r0, r23
		OCR1B= 5000 * 0.1 - x2;
 97a:	00 0c       	add	r0, r0
 97c:	88 0b       	sbc	r24, r24
 97e:	99 0b       	sbc	r25, r25
 980:	8a d1       	rcall	.+788    	; 0xc96 <__floatsisf>
 982:	9b 01       	movw	r18, r22
 984:	ac 01       	movw	r20, r24
 986:	60 e0       	ldi	r22, 0x00	; 0
 988:	70 e0       	ldi	r23, 0x00	; 0
 98a:	8a ef       	ldi	r24, 0xFA	; 250
 98c:	93 e4       	ldi	r25, 0x43	; 67
 98e:	ec d0       	rcall	.+472    	; 0xb68 <__subsf3>
 990:	54 d1       	rcall	.+680    	; 0xc3a <__fixunssfsi>
 992:	79 bd       	out	0x29, r23	; 41
 994:	68 bd       	out	0x28, r22	; 40
 996:	2a b5       	in	r18, 0x2a	; 42
 998:	3b b5       	in	r19, 0x2b	; 43
 99a:	88 b5       	in	r24, 0x28	; 40
 99c:	99 b5       	in	r25, 0x29	; 41
 99e:	28 17       	cp	r18, r24
 9a0:	39 07       	cpc	r19, r25
 9a2:	49 f0       	breq	.+18     	; 0x9b6 <__LOCK_REGION_LENGTH__+0x5b6>
 9a4:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <x1>

		if(OCR1A != OCR1B)
 9a8:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <x1+0x1>
 9ac:	01 96       	adiw	r24, 0x01	; 1
 9ae:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <x1+0x1>
 9b2:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <x1>
		x1++;
 9b6:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 9ba:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 9be:	01 96       	adiw	r24, 0x01	; 1
 9c0:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 9c4:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
		x2++;
 9c8:	10 92 0b 01 	sts	0x010B, r1	; 0x80010b <cnt+0x1>
 9cc:	10 92 0a 01 	sts	0x010A, r1	; 0x80010a <cnt>
 9d0:	2a b5       	in	r18, 0x2a	; 42
 9d2:	3b b5       	in	r19, 0x2b	; 43
 9d4:	88 b5       	in	r24, 0x28	; 40
 9d6:	99 b5       	in	r25, 0x29	; 41
		
		cnt=0;
 9d8:	28 17       	cp	r18, r24
 9da:	39 07       	cpc	r19, r25
 9dc:	89 f4       	brne	.+34     	; 0xa00 <__LOCK_REGION_LENGTH__+0x600>
 9de:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <count>
		if(OCR1A == OCR1B){
 9e2:	90 91 09 01 	lds	r25, 0x0109	; 0x800109 <count+0x1>
 9e6:	01 96       	adiw	r24, 0x01	; 1
 9e8:	90 93 09 01 	sts	0x0109, r25	; 0x800109 <count+0x1>
 9ec:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <count>
			count++;
 9f0:	10 92 03 01 	sts	0x0103, r1	; 0x800103 <x1+0x1>
 9f4:	10 92 02 01 	sts	0x0102, r1	; 0x800102 <x1>
 9f8:	10 92 01 01 	sts	0x0101, r1	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 9fc:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <__DATA_REGION_ORIGIN__>
			x1=0;
 a00:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <adc_num>
 a04:	90 91 07 01 	lds	r25, 0x0107	; 0x800107 <adc_num+0x1>
			x2=0;
 a08:	8b 3f       	cpi	r24, 0xFB	; 251
 a0a:	91 05       	cpc	r25, r1
 a0c:	74 f1       	brlt	.+92     	; 0xa6a <__LOCK_REGION_LENGTH__+0x66a>
 a0e:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <adc_num>
		}
	}
}

if( 250 < adc_num && adc_num < 400){
 a12:	90 91 07 01 	lds	r25, 0x0107	; 0x800107 <adc_num+0x1>
 a16:	80 39       	cpi	r24, 0x90	; 144
 a18:	91 40       	sbci	r25, 0x01	; 1
 a1a:	3c f5       	brge	.+78     	; 0xa6a <__LOCK_REGION_LENGTH__+0x66a>
 a1c:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <adc_count>
 a20:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <adc_count+0x1>
 a24:	01 96       	adiw	r24, 0x01	; 1
 a26:	90 93 05 01 	sts	0x0105, r25	; 0x800105 <adc_count+0x1>
 a2a:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <adc_count>
	adc_count++;
 a2e:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <adc_count>
 a32:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <adc_count+0x1>
 a36:	06 97       	sbiw	r24, 0x06	; 6
 a38:	c4 f0       	brlt	.+48     	; 0xa6a <__LOCK_REGION_LENGTH__+0x66a>
 a3a:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <adc_num>
	if(adc_count>5){
 a3e:	90 91 07 01 	lds	r25, 0x0107	; 0x800107 <adc_num+0x1>
 a42:	85 3f       	cpi	r24, 0xF5	; 245
 a44:	91 40       	sbci	r25, 0x01	; 1
 a46:	8c f0       	brlt	.+34     	; 0xa6a <__LOCK_REGION_LENGTH__+0x66a>
 a48:	e0 91 08 01 	lds	r30, 0x0108	; 0x800108 <count>
		if(adc_num>500){
 a4c:	f0 91 09 01 	lds	r31, 0x0109	; 0x800109 <count+0x1>
 a50:	e4 5f       	subi	r30, 0xF4	; 244
 a52:	fe 4f       	sbci	r31, 0xFE	; 254
 a54:	87 e6       	ldi	r24, 0x67	; 103
 a56:	80 83       	st	Z, r24
			temper[count]='g';
 a58:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <count>
 a5c:	90 91 09 01 	lds	r25, 0x0109	; 0x800109 <count+0x1>
 a60:	01 96       	adiw	r24, 0x01	; 1
 a62:	90 93 09 01 	sts	0x0109, r25	; 0x800109 <count+0x1>
 a66:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <count>
			count++;
 a6a:	e0 91 08 01 	lds	r30, 0x0108	; 0x800108 <count>
 a6e:	f0 91 09 01 	lds	r31, 0x0109	; 0x800109 <count+0x1>
 a72:	e4 5f       	subi	r30, 0xF4	; 244
 a74:	fe 4f       	sbci	r31, 0xFE	; 254
 a76:	80 81       	ld	r24, Z
 a78:	87 36       	cpi	r24, 0x67	; 103
		}
	}
}
if(temper[count]=='g'){
 a7a:	d1 f4       	brne	.+52     	; 0xab0 <__LOCK_REGION_LENGTH__+0x6b0>
 a7c:	8f ef       	ldi	r24, 0xFF	; 255
 a7e:	97 ea       	ldi	r25, 0xA7	; 167
 a80:	21 e6       	ldi	r18, 0x61	; 97
 a82:	81 50       	subi	r24, 0x01	; 1
 a84:	90 40       	sbci	r25, 0x00	; 0
 a86:	20 40       	sbci	r18, 0x00	; 0
 a88:	e1 f7       	brne	.-8      	; 0xa82 <__LOCK_REGION_LENGTH__+0x682>
 a8a:	00 c0       	rjmp	.+0      	; 0xa8c <__LOCK_REGION_LENGTH__+0x68c>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 a8c:	00 00       	nop
 a8e:	e0 91 08 01 	lds	r30, 0x0108	; 0x800108 <count>
 a92:	f0 91 09 01 	lds	r31, 0x0109	; 0x800109 <count+0x1>
 a96:	e4 5f       	subi	r30, 0xF4	; 244
 a98:	fe 4f       	sbci	r31, 0xFE	; 254
 a9a:	88 e6       	ldi	r24, 0x68	; 104
 a9c:	80 83       	st	Z, r24
	_delay_ms(2000);
	temper[count]='h';
 a9e:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <count>
 aa2:	90 91 09 01 	lds	r25, 0x0109	; 0x800109 <count+0x1>
 aa6:	01 96       	adiw	r24, 0x01	; 1
 aa8:	90 93 09 01 	sts	0x0109, r25	; 0x800109 <count+0x1>
 aac:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <count>
	count++;
 ab0:	83 e8       	ldi	r24, 0x83	; 131
 ab2:	84 bd       	out	0x24, r24	; 36
 ab4:	ff 91       	pop	r31
 ab6:	ef 91       	pop	r30
 ab8:	df 91       	pop	r29
 aba:	cf 91       	pop	r28
 abc:	bf 91       	pop	r27
 abe:	af 91       	pop	r26
}
TCNT2 = 131;
 ac0:	9f 91       	pop	r25
 ac2:	8f 91       	pop	r24
}
 ac4:	7f 91       	pop	r23
 ac6:	6f 91       	pop	r22
 ac8:	5f 91       	pop	r21
 aca:	4f 91       	pop	r20
 acc:	3f 91       	pop	r19
 ace:	2f 91       	pop	r18
 ad0:	0f 90       	pop	r0
 ad2:	0b be       	out	0x3b, r0	; 59
 ad4:	0f 90       	pop	r0
 ad6:	0f be       	out	0x3f, r0	; 63
 ad8:	0f 90       	pop	r0
 ada:	1f 90       	pop	r1
 adc:	18 95       	reti

00000ade <main>:
 ade:	8f ef       	ldi	r24, 0xFF	; 255
 ae0:	87 bb       	out	0x17, r24	; 23
 ae2:	82 b9       	out	0x02, r24	; 2
 ae4:	88 e0       	ldi	r24, 0x08	; 8
 ae6:	81 bb       	out	0x11, r24	; 17
 ae8:	10 92 61 00 	sts	0x0061, r1	; 0x800061 <__TEXT_REGION_LENGTH__+0x7e0061>
 aec:	22 ea       	ldi	r18, 0xA2	; 162
	DDRB=0xff;
	DDRE=0xff;
	DDRD=0x08;
	DDRF=0x00;
	
	TCCR1A = (1<<COM1A1)|(1<<COM1B1)|(1<<WGM11);
 aee:	2f bd       	out	0x2f, r18	; 47
	TCCR1B = (1<<WGM13)|(1<<WGM12)|(0<<CS12)|(1<<CS11)|(1<<CS10);
 af0:	9b e1       	ldi	r25, 0x1B	; 27
 af2:	9e bd       	out	0x2e, r25	; 46
	//prescale 64
	TCCR3A = (1<<COM3A1)|(1<<COM3B1)|(1<<WGM31);
 af4:	20 93 8b 00 	sts	0x008B, r18	; 0x80008b <__TEXT_REGION_LENGTH__+0x7e008b>
	TCCR3B = (1<<WGM33)|(1<<WGM32)|(0<<CS32)|(1<<CS31)|(1<<CS30);
 af8:	90 93 8a 00 	sts	0x008A, r25	; 0x80008a <__TEXT_REGION_LENGTH__+0x7e008a>
	//prescale 64
	ADMUX = 0x41;
 afc:	91 e4       	ldi	r25, 0x41	; 65
 afe:	97 b9       	out	0x07, r25	; 7
	ADCSRA = (1 << ADEN)|(1 << ADPS2)|(1 << ADPS1)|(1 << ADPS0);
 b00:	97 e8       	ldi	r25, 0x87	; 135
 b02:	96 b9       	out	0x06, r25	; 6
	
	TCCR2=(0<<WGM20)|(0<<WGM21)|(1<<CS22)|(0<<CS21)|(0<<CS20);
 b04:	94 e0       	ldi	r25, 0x04	; 4
 b06:	95 bd       	out	0x25, r25	; 37
	TIMSK=(1<<TOIE2);
 b08:	90 e4       	ldi	r25, 0x40	; 64
 b0a:	97 bf       	out	0x37, r25	; 55
	TCNT2=131;
 b0c:	93 e8       	ldi	r25, 0x83	; 131
 b0e:	94 bd       	out	0x24, r25	; 36
	//prescale 256
	
	UCSR1A=0x00;
 b10:	10 92 9b 00 	sts	0x009B, r1	; 0x80009b <__TEXT_REGION_LENGTH__+0x7e009b>
	UCSR1B=0x18;
 b14:	28 e1       	ldi	r18, 0x18	; 24
 b16:	20 93 9a 00 	sts	0x009A, r18	; 0x80009a <__TEXT_REGION_LENGTH__+0x7e009a>
	UCSR1C=0x06;
 b1a:	96 e0       	ldi	r25, 0x06	; 6
 b1c:	90 93 9d 00 	sts	0x009D, r25	; 0x80009d <__TEXT_REGION_LENGTH__+0x7e009d>
	UBRR1H=0;
 b20:	10 92 98 00 	sts	0x0098, r1	; 0x800098 <__TEXT_REGION_LENGTH__+0x7e0098>
	UBRR1L=8;
 b24:	80 93 99 00 	sts	0x0099, r24	; 0x800099 <__TEXT_REGION_LENGTH__+0x7e0099>
	
	UCSR0A=0x00;
 b28:	1b b8       	out	0x0b, r1	; 11
	UCSR0B=0x18;
 b2a:	2a b9       	out	0x0a, r18	; 10
	UCSR0C=0x06;
 b2c:	90 93 95 00 	sts	0x0095, r25	; 0x800095 <__TEXT_REGION_LENGTH__+0x7e0095>
	UBRR0H=0;
 b30:	10 92 90 00 	sts	0x0090, r1	; 0x800090 <__TEXT_REGION_LENGTH__+0x7e0090>
	UBRR0L=8;
 b34:	89 b9       	out	0x09, r24	; 9
	
	ICR1 = 4999;
 b36:	87 e8       	ldi	r24, 0x87	; 135
 b38:	93 e1       	ldi	r25, 0x13	; 19
 b3a:	97 bd       	out	0x27, r25	; 39
 b3c:	86 bd       	out	0x26, r24	; 38
	ICR3 = 4999;
 b3e:	90 93 81 00 	sts	0x0081, r25	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
 b42:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
	OCR1A =5000*0.075;
 b46:	87 e7       	ldi	r24, 0x77	; 119
 b48:	91 e0       	ldi	r25, 0x01	; 1
 b4a:	9b bd       	out	0x2b, r25	; 43
 b4c:	8a bd       	out	0x2a, r24	; 42
	OCR1B =5000*0.075;
 b4e:	99 bd       	out	0x29, r25	; 41
 b50:	88 bd       	out	0x28, r24	; 40
	OCR3A =5000*0.075;
 b52:	90 93 87 00 	sts	0x0087, r25	; 0x800087 <__TEXT_REGION_LENGTH__+0x7e0087>
 b56:	80 93 86 00 	sts	0x0086, r24	; 0x800086 <__TEXT_REGION_LENGTH__+0x7e0086>
	OCR3B =5000*0.075;
 b5a:	90 93 85 00 	sts	0x0085, r25	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
 b5e:	80 93 84 00 	sts	0x0084, r24	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
	sei();
 b62:	78 94       	sei
	
	while(1){
		UART1_Receive();
 b64:	a4 da       	rcall	.-2744   	; 0xae <UART1_Receive>
 b66:	fe cf       	rjmp	.-4      	; 0xb64 <main+0x86>

00000b68 <__subsf3>:
 b68:	50 58       	subi	r21, 0x80	; 128

00000b6a <__addsf3>:
 b6a:	bb 27       	eor	r27, r27
 b6c:	aa 27       	eor	r26, r26
 b6e:	0e d0       	rcall	.+28     	; 0xb8c <__addsf3x>
 b70:	08 c1       	rjmp	.+528    	; 0xd82 <__fp_round>
 b72:	f9 d0       	rcall	.+498    	; 0xd66 <__fp_pscA>
 b74:	30 f0       	brcs	.+12     	; 0xb82 <__addsf3+0x18>
 b76:	fe d0       	rcall	.+508    	; 0xd74 <__fp_pscB>
 b78:	20 f0       	brcs	.+8      	; 0xb82 <__addsf3+0x18>
 b7a:	31 f4       	brne	.+12     	; 0xb88 <__addsf3+0x1e>
 b7c:	9f 3f       	cpi	r25, 0xFF	; 255
 b7e:	11 f4       	brne	.+4      	; 0xb84 <__addsf3+0x1a>
 b80:	1e f4       	brtc	.+6      	; 0xb88 <__addsf3+0x1e>
 b82:	ee c0       	rjmp	.+476    	; 0xd60 <__fp_nan>
 b84:	0e f4       	brtc	.+2      	; 0xb88 <__addsf3+0x1e>
 b86:	e0 95       	com	r30
 b88:	e7 fb       	bst	r30, 7
 b8a:	e4 c0       	rjmp	.+456    	; 0xd54 <__fp_inf>

00000b8c <__addsf3x>:
 b8c:	e9 2f       	mov	r30, r25
 b8e:	0a d1       	rcall	.+532    	; 0xda4 <__fp_split3>
 b90:	80 f3       	brcs	.-32     	; 0xb72 <__addsf3+0x8>
 b92:	ba 17       	cp	r27, r26
 b94:	62 07       	cpc	r22, r18
 b96:	73 07       	cpc	r23, r19
 b98:	84 07       	cpc	r24, r20
 b9a:	95 07       	cpc	r25, r21
 b9c:	18 f0       	brcs	.+6      	; 0xba4 <__addsf3x+0x18>
 b9e:	71 f4       	brne	.+28     	; 0xbbc <__addsf3x+0x30>
 ba0:	9e f5       	brtc	.+102    	; 0xc08 <__addsf3x+0x7c>
 ba2:	22 c1       	rjmp	.+580    	; 0xde8 <__fp_zero>
 ba4:	0e f4       	brtc	.+2      	; 0xba8 <__addsf3x+0x1c>
 ba6:	e0 95       	com	r30
 ba8:	0b 2e       	mov	r0, r27
 baa:	ba 2f       	mov	r27, r26
 bac:	a0 2d       	mov	r26, r0
 bae:	0b 01       	movw	r0, r22
 bb0:	b9 01       	movw	r22, r18
 bb2:	90 01       	movw	r18, r0
 bb4:	0c 01       	movw	r0, r24
 bb6:	ca 01       	movw	r24, r20
 bb8:	a0 01       	movw	r20, r0
 bba:	11 24       	eor	r1, r1
 bbc:	ff 27       	eor	r31, r31
 bbe:	59 1b       	sub	r21, r25
 bc0:	99 f0       	breq	.+38     	; 0xbe8 <__addsf3x+0x5c>
 bc2:	59 3f       	cpi	r21, 0xF9	; 249
 bc4:	50 f4       	brcc	.+20     	; 0xbda <__addsf3x+0x4e>
 bc6:	50 3e       	cpi	r21, 0xE0	; 224
 bc8:	68 f1       	brcs	.+90     	; 0xc24 <__addsf3x+0x98>
 bca:	1a 16       	cp	r1, r26
 bcc:	f0 40       	sbci	r31, 0x00	; 0
 bce:	a2 2f       	mov	r26, r18
 bd0:	23 2f       	mov	r18, r19
 bd2:	34 2f       	mov	r19, r20
 bd4:	44 27       	eor	r20, r20
 bd6:	58 5f       	subi	r21, 0xF8	; 248
 bd8:	f3 cf       	rjmp	.-26     	; 0xbc0 <__addsf3x+0x34>
 bda:	46 95       	lsr	r20
 bdc:	37 95       	ror	r19
 bde:	27 95       	ror	r18
 be0:	a7 95       	ror	r26
 be2:	f0 40       	sbci	r31, 0x00	; 0
 be4:	53 95       	inc	r21
 be6:	c9 f7       	brne	.-14     	; 0xbda <__addsf3x+0x4e>
 be8:	7e f4       	brtc	.+30     	; 0xc08 <__addsf3x+0x7c>
 bea:	1f 16       	cp	r1, r31
 bec:	ba 0b       	sbc	r27, r26
 bee:	62 0b       	sbc	r22, r18
 bf0:	73 0b       	sbc	r23, r19
 bf2:	84 0b       	sbc	r24, r20
 bf4:	ba f0       	brmi	.+46     	; 0xc24 <__addsf3x+0x98>
 bf6:	91 50       	subi	r25, 0x01	; 1
 bf8:	a1 f0       	breq	.+40     	; 0xc22 <__addsf3x+0x96>
 bfa:	ff 0f       	add	r31, r31
 bfc:	bb 1f       	adc	r27, r27
 bfe:	66 1f       	adc	r22, r22
 c00:	77 1f       	adc	r23, r23
 c02:	88 1f       	adc	r24, r24
 c04:	c2 f7       	brpl	.-16     	; 0xbf6 <__addsf3x+0x6a>
 c06:	0e c0       	rjmp	.+28     	; 0xc24 <__addsf3x+0x98>
 c08:	ba 0f       	add	r27, r26
 c0a:	62 1f       	adc	r22, r18
 c0c:	73 1f       	adc	r23, r19
 c0e:	84 1f       	adc	r24, r20
 c10:	48 f4       	brcc	.+18     	; 0xc24 <__addsf3x+0x98>
 c12:	87 95       	ror	r24
 c14:	77 95       	ror	r23
 c16:	67 95       	ror	r22
 c18:	b7 95       	ror	r27
 c1a:	f7 95       	ror	r31
 c1c:	9e 3f       	cpi	r25, 0xFE	; 254
 c1e:	08 f0       	brcs	.+2      	; 0xc22 <__addsf3x+0x96>
 c20:	b3 cf       	rjmp	.-154    	; 0xb88 <__addsf3+0x1e>
 c22:	93 95       	inc	r25
 c24:	88 0f       	add	r24, r24
 c26:	08 f0       	brcs	.+2      	; 0xc2a <__addsf3x+0x9e>
 c28:	99 27       	eor	r25, r25
 c2a:	ee 0f       	add	r30, r30
 c2c:	97 95       	ror	r25
 c2e:	87 95       	ror	r24
 c30:	08 95       	ret

00000c32 <__cmpsf2>:
 c32:	6c d0       	rcall	.+216    	; 0xd0c <__fp_cmp>
 c34:	08 f4       	brcc	.+2      	; 0xc38 <__cmpsf2+0x6>
 c36:	81 e0       	ldi	r24, 0x01	; 1
 c38:	08 95       	ret

00000c3a <__fixunssfsi>:
 c3a:	bc d0       	rcall	.+376    	; 0xdb4 <__fp_splitA>
 c3c:	88 f0       	brcs	.+34     	; 0xc60 <__fixunssfsi+0x26>
 c3e:	9f 57       	subi	r25, 0x7F	; 127
 c40:	90 f0       	brcs	.+36     	; 0xc66 <__fixunssfsi+0x2c>
 c42:	b9 2f       	mov	r27, r25
 c44:	99 27       	eor	r25, r25
 c46:	b7 51       	subi	r27, 0x17	; 23
 c48:	a0 f0       	brcs	.+40     	; 0xc72 <__fixunssfsi+0x38>
 c4a:	d1 f0       	breq	.+52     	; 0xc80 <__fixunssfsi+0x46>
 c4c:	66 0f       	add	r22, r22
 c4e:	77 1f       	adc	r23, r23
 c50:	88 1f       	adc	r24, r24
 c52:	99 1f       	adc	r25, r25
 c54:	1a f0       	brmi	.+6      	; 0xc5c <__fixunssfsi+0x22>
 c56:	ba 95       	dec	r27
 c58:	c9 f7       	brne	.-14     	; 0xc4c <__fixunssfsi+0x12>
 c5a:	12 c0       	rjmp	.+36     	; 0xc80 <__fixunssfsi+0x46>
 c5c:	b1 30       	cpi	r27, 0x01	; 1
 c5e:	81 f0       	breq	.+32     	; 0xc80 <__fixunssfsi+0x46>
 c60:	c3 d0       	rcall	.+390    	; 0xde8 <__fp_zero>
 c62:	b1 e0       	ldi	r27, 0x01	; 1
 c64:	08 95       	ret
 c66:	c0 c0       	rjmp	.+384    	; 0xde8 <__fp_zero>
 c68:	67 2f       	mov	r22, r23
 c6a:	78 2f       	mov	r23, r24
 c6c:	88 27       	eor	r24, r24
 c6e:	b8 5f       	subi	r27, 0xF8	; 248
 c70:	39 f0       	breq	.+14     	; 0xc80 <__fixunssfsi+0x46>
 c72:	b9 3f       	cpi	r27, 0xF9	; 249
 c74:	cc f3       	brlt	.-14     	; 0xc68 <__fixunssfsi+0x2e>
 c76:	86 95       	lsr	r24
 c78:	77 95       	ror	r23
 c7a:	67 95       	ror	r22
 c7c:	b3 95       	inc	r27
 c7e:	d9 f7       	brne	.-10     	; 0xc76 <__fixunssfsi+0x3c>
 c80:	3e f4       	brtc	.+14     	; 0xc90 <__fixunssfsi+0x56>
 c82:	90 95       	com	r25
 c84:	80 95       	com	r24
 c86:	70 95       	com	r23
 c88:	61 95       	neg	r22
 c8a:	7f 4f       	sbci	r23, 0xFF	; 255
 c8c:	8f 4f       	sbci	r24, 0xFF	; 255
 c8e:	9f 4f       	sbci	r25, 0xFF	; 255
 c90:	08 95       	ret

00000c92 <__floatunsisf>:
 c92:	e8 94       	clt
 c94:	09 c0       	rjmp	.+18     	; 0xca8 <__floatsisf+0x12>

00000c96 <__floatsisf>:
 c96:	97 fb       	bst	r25, 7
 c98:	3e f4       	brtc	.+14     	; 0xca8 <__floatsisf+0x12>
 c9a:	90 95       	com	r25
 c9c:	80 95       	com	r24
 c9e:	70 95       	com	r23
 ca0:	61 95       	neg	r22
 ca2:	7f 4f       	sbci	r23, 0xFF	; 255
 ca4:	8f 4f       	sbci	r24, 0xFF	; 255
 ca6:	9f 4f       	sbci	r25, 0xFF	; 255
 ca8:	99 23       	and	r25, r25
 caa:	a9 f0       	breq	.+42     	; 0xcd6 <__floatsisf+0x40>
 cac:	f9 2f       	mov	r31, r25
 cae:	96 e9       	ldi	r25, 0x96	; 150
 cb0:	bb 27       	eor	r27, r27
 cb2:	93 95       	inc	r25
 cb4:	f6 95       	lsr	r31
 cb6:	87 95       	ror	r24
 cb8:	77 95       	ror	r23
 cba:	67 95       	ror	r22
 cbc:	b7 95       	ror	r27
 cbe:	f1 11       	cpse	r31, r1
 cc0:	f8 cf       	rjmp	.-16     	; 0xcb2 <__floatsisf+0x1c>
 cc2:	fa f4       	brpl	.+62     	; 0xd02 <__floatsisf+0x6c>
 cc4:	bb 0f       	add	r27, r27
 cc6:	11 f4       	brne	.+4      	; 0xccc <__floatsisf+0x36>
 cc8:	60 ff       	sbrs	r22, 0
 cca:	1b c0       	rjmp	.+54     	; 0xd02 <__floatsisf+0x6c>
 ccc:	6f 5f       	subi	r22, 0xFF	; 255
 cce:	7f 4f       	sbci	r23, 0xFF	; 255
 cd0:	8f 4f       	sbci	r24, 0xFF	; 255
 cd2:	9f 4f       	sbci	r25, 0xFF	; 255
 cd4:	16 c0       	rjmp	.+44     	; 0xd02 <__floatsisf+0x6c>
 cd6:	88 23       	and	r24, r24
 cd8:	11 f0       	breq	.+4      	; 0xcde <__floatsisf+0x48>
 cda:	96 e9       	ldi	r25, 0x96	; 150
 cdc:	11 c0       	rjmp	.+34     	; 0xd00 <__floatsisf+0x6a>
 cde:	77 23       	and	r23, r23
 ce0:	21 f0       	breq	.+8      	; 0xcea <__floatsisf+0x54>
 ce2:	9e e8       	ldi	r25, 0x8E	; 142
 ce4:	87 2f       	mov	r24, r23
 ce6:	76 2f       	mov	r23, r22
 ce8:	05 c0       	rjmp	.+10     	; 0xcf4 <__floatsisf+0x5e>
 cea:	66 23       	and	r22, r22
 cec:	71 f0       	breq	.+28     	; 0xd0a <__floatsisf+0x74>
 cee:	96 e8       	ldi	r25, 0x86	; 134
 cf0:	86 2f       	mov	r24, r22
 cf2:	70 e0       	ldi	r23, 0x00	; 0
 cf4:	60 e0       	ldi	r22, 0x00	; 0
 cf6:	2a f0       	brmi	.+10     	; 0xd02 <__floatsisf+0x6c>
 cf8:	9a 95       	dec	r25
 cfa:	66 0f       	add	r22, r22
 cfc:	77 1f       	adc	r23, r23
 cfe:	88 1f       	adc	r24, r24
 d00:	da f7       	brpl	.-10     	; 0xcf8 <__floatsisf+0x62>
 d02:	88 0f       	add	r24, r24
 d04:	96 95       	lsr	r25
 d06:	87 95       	ror	r24
 d08:	97 f9       	bld	r25, 7
 d0a:	08 95       	ret

00000d0c <__fp_cmp>:
 d0c:	99 0f       	add	r25, r25
 d0e:	00 08       	sbc	r0, r0
 d10:	55 0f       	add	r21, r21
 d12:	aa 0b       	sbc	r26, r26
 d14:	e0 e8       	ldi	r30, 0x80	; 128
 d16:	fe ef       	ldi	r31, 0xFE	; 254
 d18:	16 16       	cp	r1, r22
 d1a:	17 06       	cpc	r1, r23
 d1c:	e8 07       	cpc	r30, r24
 d1e:	f9 07       	cpc	r31, r25
 d20:	c0 f0       	brcs	.+48     	; 0xd52 <__fp_cmp+0x46>
 d22:	12 16       	cp	r1, r18
 d24:	13 06       	cpc	r1, r19
 d26:	e4 07       	cpc	r30, r20
 d28:	f5 07       	cpc	r31, r21
 d2a:	98 f0       	brcs	.+38     	; 0xd52 <__fp_cmp+0x46>
 d2c:	62 1b       	sub	r22, r18
 d2e:	73 0b       	sbc	r23, r19
 d30:	84 0b       	sbc	r24, r20
 d32:	95 0b       	sbc	r25, r21
 d34:	39 f4       	brne	.+14     	; 0xd44 <__fp_cmp+0x38>
 d36:	0a 26       	eor	r0, r26
 d38:	61 f0       	breq	.+24     	; 0xd52 <__fp_cmp+0x46>
 d3a:	23 2b       	or	r18, r19
 d3c:	24 2b       	or	r18, r20
 d3e:	25 2b       	or	r18, r21
 d40:	21 f4       	brne	.+8      	; 0xd4a <__fp_cmp+0x3e>
 d42:	08 95       	ret
 d44:	0a 26       	eor	r0, r26
 d46:	09 f4       	brne	.+2      	; 0xd4a <__fp_cmp+0x3e>
 d48:	a1 40       	sbci	r26, 0x01	; 1
 d4a:	a6 95       	lsr	r26
 d4c:	8f ef       	ldi	r24, 0xFF	; 255
 d4e:	81 1d       	adc	r24, r1
 d50:	81 1d       	adc	r24, r1
 d52:	08 95       	ret

00000d54 <__fp_inf>:
 d54:	97 f9       	bld	r25, 7
 d56:	9f 67       	ori	r25, 0x7F	; 127
 d58:	80 e8       	ldi	r24, 0x80	; 128
 d5a:	70 e0       	ldi	r23, 0x00	; 0
 d5c:	60 e0       	ldi	r22, 0x00	; 0
 d5e:	08 95       	ret

00000d60 <__fp_nan>:
 d60:	9f ef       	ldi	r25, 0xFF	; 255
 d62:	80 ec       	ldi	r24, 0xC0	; 192
 d64:	08 95       	ret

00000d66 <__fp_pscA>:
 d66:	00 24       	eor	r0, r0
 d68:	0a 94       	dec	r0
 d6a:	16 16       	cp	r1, r22
 d6c:	17 06       	cpc	r1, r23
 d6e:	18 06       	cpc	r1, r24
 d70:	09 06       	cpc	r0, r25
 d72:	08 95       	ret

00000d74 <__fp_pscB>:
 d74:	00 24       	eor	r0, r0
 d76:	0a 94       	dec	r0
 d78:	12 16       	cp	r1, r18
 d7a:	13 06       	cpc	r1, r19
 d7c:	14 06       	cpc	r1, r20
 d7e:	05 06       	cpc	r0, r21
 d80:	08 95       	ret

00000d82 <__fp_round>:
 d82:	09 2e       	mov	r0, r25
 d84:	03 94       	inc	r0
 d86:	00 0c       	add	r0, r0
 d88:	11 f4       	brne	.+4      	; 0xd8e <__fp_round+0xc>
 d8a:	88 23       	and	r24, r24
 d8c:	52 f0       	brmi	.+20     	; 0xda2 <__fp_round+0x20>
 d8e:	bb 0f       	add	r27, r27
 d90:	40 f4       	brcc	.+16     	; 0xda2 <__fp_round+0x20>
 d92:	bf 2b       	or	r27, r31
 d94:	11 f4       	brne	.+4      	; 0xd9a <__fp_round+0x18>
 d96:	60 ff       	sbrs	r22, 0
 d98:	04 c0       	rjmp	.+8      	; 0xda2 <__fp_round+0x20>
 d9a:	6f 5f       	subi	r22, 0xFF	; 255
 d9c:	7f 4f       	sbci	r23, 0xFF	; 255
 d9e:	8f 4f       	sbci	r24, 0xFF	; 255
 da0:	9f 4f       	sbci	r25, 0xFF	; 255
 da2:	08 95       	ret

00000da4 <__fp_split3>:
 da4:	57 fd       	sbrc	r21, 7
 da6:	90 58       	subi	r25, 0x80	; 128
 da8:	44 0f       	add	r20, r20
 daa:	55 1f       	adc	r21, r21
 dac:	59 f0       	breq	.+22     	; 0xdc4 <__fp_splitA+0x10>
 dae:	5f 3f       	cpi	r21, 0xFF	; 255
 db0:	71 f0       	breq	.+28     	; 0xdce <__fp_splitA+0x1a>
 db2:	47 95       	ror	r20

00000db4 <__fp_splitA>:
 db4:	88 0f       	add	r24, r24
 db6:	97 fb       	bst	r25, 7
 db8:	99 1f       	adc	r25, r25
 dba:	61 f0       	breq	.+24     	; 0xdd4 <__fp_splitA+0x20>
 dbc:	9f 3f       	cpi	r25, 0xFF	; 255
 dbe:	79 f0       	breq	.+30     	; 0xdde <__fp_splitA+0x2a>
 dc0:	87 95       	ror	r24
 dc2:	08 95       	ret
 dc4:	12 16       	cp	r1, r18
 dc6:	13 06       	cpc	r1, r19
 dc8:	14 06       	cpc	r1, r20
 dca:	55 1f       	adc	r21, r21
 dcc:	f2 cf       	rjmp	.-28     	; 0xdb2 <__fp_split3+0xe>
 dce:	46 95       	lsr	r20
 dd0:	f1 df       	rcall	.-30     	; 0xdb4 <__fp_splitA>
 dd2:	08 c0       	rjmp	.+16     	; 0xde4 <__fp_splitA+0x30>
 dd4:	16 16       	cp	r1, r22
 dd6:	17 06       	cpc	r1, r23
 dd8:	18 06       	cpc	r1, r24
 dda:	99 1f       	adc	r25, r25
 ddc:	f1 cf       	rjmp	.-30     	; 0xdc0 <__fp_splitA+0xc>
 dde:	86 95       	lsr	r24
 de0:	71 05       	cpc	r23, r1
 de2:	61 05       	cpc	r22, r1
 de4:	08 94       	sec
 de6:	08 95       	ret

00000de8 <__fp_zero>:
 de8:	e8 94       	clt

00000dea <__fp_szero>:
 dea:	bb 27       	eor	r27, r27
 dec:	66 27       	eor	r22, r22
 dee:	77 27       	eor	r23, r23
 df0:	cb 01       	movw	r24, r22
 df2:	97 f9       	bld	r25, 7
 df4:	08 95       	ret

00000df6 <_exit>:
 df6:	f8 94       	cli

00000df8 <__stop_program>:
 df8:	ff cf       	rjmp	.-2      	; 0xdf8 <__stop_program>
